create_bot.py
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import BoundFilter
from aiogram.dispatcher import Dispatcher
from aiogram import types
from aiogram import Bot

from config import TOKEN, log_on
from config import ADMINS
from typing import Union

from middlewares.album import AlbumMiddleware
from utils import db
import logging


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
if log_on:
    # –ï—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (log_on=True), —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª bot.log
    logging.basicConfig(level=logging.INFO, filename='bot.log', filemode='a',
                        format='%(asctime)s - %(levelname)s - %(message)s')
    log = logging.getLogger("logs")
else:
    # –ï—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
    logging.basicConfig(level=logging.INFO,
                        format='%(asctime)s - %(levelname)s - %(message)s')
    log = logging.getLogger("logs")


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ OpenAI
logger = logging.getLogger('openai')
logger.setLevel(logging.WARNING)  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤ –¥–ª—è OpenAI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
stor = MemoryStorage()  # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏, —ç—Ç–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –±–æ—Ç–æ–≤


# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º, –∑–∞–¥–∞–Ω–Ω—ã–º –≤ —Ñ–∞–π–ª–µ config.py
bot = Bot(token=TOKEN, parse_mode="HTML")  # parse_mode –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ HTML


# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–æ–π –±–æ—Ç–∞ –∏ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏
dp = Dispatcher(bot, storage=stor)


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
class IsAdminFilter(BoundFilter):

    key = "is_admin"  # –ö–ª—é—á, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ñ–∏–ª—å—Ç—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞

    def __init__(self, is_admin: bool):
        self.global_admin = is_admin  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ñ–ª–∞–≥, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –Ω–µ—Ç

    async def check(self, obj: Union[types.Message, types.CallbackQuery]):

        # –ú–µ—Ç–æ–¥ check –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–∞
        user = obj.from_user
        db_user = await db.get_user(user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if user.id in ADMINS:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –æ–Ω —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
            return self.global_admin is True
        if db_user["role"] == "admin":
            # –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
            return self.global_admin is True
        return self.global_admin is False


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–ª—å–±–æ–º–æ–≤
# dp.middleware.setup(CheckRegMiddleware())  # Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
dp.middleware.setup(AlbumMiddleware())  # Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤ (–≥—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ)


# –ü—Ä–∏–≤—è–∑–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –∫ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
dp.filters_factory.bind(IsAdminFilter)


main.py
from aiogram.utils import executor
from aiogram import types
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import ADMINS_CODER
from create_bot import dp, bot
from utils import db
from utils.ai import mj_api
from handlers import admin, users, sub, users_image_openai # ‚Üê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
import logging

from utils.scheduled_tasks.daily_token_reset import refill_tokens

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()


async def on_startup(_):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""

    await db.start()  # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î

    await bot.set_my_commands([
        types.BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"),
        types.BotCommand("chatgpt", "ChatGPT"),
        types.BotCommand("midjourney", "MidJourney"),
        # types.BotCommand("image_openai", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI"),
        types.BotCommand("account", "–ê–∫–∫–∞—É–Ω—Ç"),
        types.BotCommand("help", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
        types.BotCommand("partner", "–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
    ])

    await bot.send_message(ADMINS_CODER, "–ë–æ—Ç NeuronAgent ü§ñ –∑–∞–ø—É—â–µ–Ω")

    # –ù–∞—Å—Ç—Ä–æ–∏–º –∏ –∑–∞–ø—É—Å—Ç–∏–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    set_scheduled_jobs()

    if not scheduler.running:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()


def set_scheduled_jobs():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
    try:
        scheduler.add_job(refill_tokens, "cron", hour=0, minute=0)
    except Exception as e:
        logger.error(f"Error while adding scheduled jobs: {e}")


async def on_shutdown(_):
    """–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π API –∏ –±–æ—Ç–∞...")

    await mj_api.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º API-—Å–µ—Å—Å–∏–∏
    await bot.close()

    if scheduler.running:
        scheduler.shutdown(wait=False)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

    logger.info("–í—Å–µ —Å–µ—Å—Å–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)


handlers\admin.py
import string
import random
import logging
from datetime import datetime, timedelta

from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, Message, CallbackQuery

import config
import keyboards.admin as admin_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥
from config import bot_url, ADMINS, ADMINS_CODER
from states.admin import TokenAdding
from utils.ai import mj_api
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from tabulate import tabulate  # –ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—ã
import states.admin as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
from utils import db  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import asyncio

from utils.scheduled_tasks.daily_token_reset import refill_tokens

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
def format_statistics(stats):
    result = ""
    for order_type, details in stats.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
        unit = "–∑–∞–ø—Ä–æ—Å–æ–≤" if order_type == "midjourney" else "—Ç–æ–∫–µ–Ω–æ–≤"

        quantity_map = {
            "100000": "100–∫",
            "200000": "200–∫",
            "500000": "500–∫"
        }

        order_type = "ChatGPT" if order_type == "chatgpt" else "MidJourney"
        result += f"*{order_type}:*\n"
        total_requests = 0
        total_sum = 0

        for quantity, data in details.items():

            total_sum += data['total_amount']
            total_requests += data['count']

            if str(quantity) in quantity_map:
                quantity = quantity_map[str(quantity)]
            result += f"{quantity} {unit}: {data['count']}, –Ω–∞ —Å—É–º–º—É {data['total_amount']}‚ÇΩ\n"
        result += f"*–í—Å–µ–≥–æ: {total_requests}, –Ω–∞ —Å—É–º–º—É {total_sum}‚ÇΩ*\n"
        result += "\n"
    return result


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
@dp.message_handler(lambda message: message.from_user.id in ADMINS,
                    text=["#switch_to_goapi", "#switch_to_apiframe"]
                    )
async def switch_api_handler(message: Message):
    user_id = message.from_user.id
    if message.text == "#switch_to_goapi":
        try:
            mj_api.set_primary_api("goapi")
            await message.reply("–û—Å–Ω–æ–≤–Ω–æ–π API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ **GoAPI**.")
            logging.info(f"API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ GoAPI –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except ValueError as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ GoAPI: {e}")
    elif message.text == "#switch_to_apiframe":
        try:
            mj_api.set_primary_api("apiframe")
            await message.reply("–û—Å–Ω–æ–≤–Ω–æ–π API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ **ApiFrame**.")
            logging.info(f"API –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ ApiFrame –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except ValueError as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ ApiFrame: {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∑–∞–ø—Ä–æ—Å–∞–º
@dp.message_handler(lambda message: message.from_user.id in ADMINS,
                    commands="stats"
                    )
async def show_stats(message: Message):
    statistics = (await db.fetch_short_statistics()).replace('None', '0')

    logger.info(statistics)

    await message.answer(statistics, reply_markup=admin_kb.more_stats_kb(), parse_mode=ParseMode.MARKDOWN_V2)


@dp.callback_query_handler(lambda callback: callback.from_user.id in ADMINS,
                           text="stats"
                           )
async def show_stats(callback: CallbackQuery):
    statistics = (await db.fetch_short_statistics()).replace('None', '0')

    logger.info(statistics)

    await callback.message.edit_text(statistics, reply_markup=admin_kb.more_stats_kb(),
                                     parse_mode=ParseMode.MARKDOWN_V2)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∑–∞–ø—Ä–æ—Å–∞–º
@dp.callback_query_handler(lambda callback: callback.from_user.id in ADMINS,
                           text="more_stats"
                           )
async def show_stats(callback: CallbackQuery):
    statistics = (await db.fetch_statistics()).replace('None', '0')

    logger.info(statistics)

    await callback.message.edit_text(statistics, reply_markup=admin_kb.less_stats_kb(),
                                     parse_mode=ParseMode.MARKDOWN_V2)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@dp.callback_query_handler(is_admin=True, text='admin_ref_menu')
async def admin_ref_menu(call: CallbackQuery):
    inviters_id = await db.get_all_inviters()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    inviters = []
    for inviter_id in inviters_id:
        inviter = await db.get_ref_stat(inviter_id['inviter_id'])  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º
        if inviter['all_income'] is None:
            all_income = 0
        else:
            all_income = inviter['all_income']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ—Ñ–µ—Ä–∞–ª—É
        inviters.append(
            {'user_id': inviter_id['inviter_id'], 'refs_count': inviter['count_refs'],
             'orders_count': inviter['orders_count'],
             'all_income': all_income, 'available_for_withdrawal': inviter['available_for_withdrawal']})

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º
    sort_inviters = sorted(inviters, key=lambda d: d['all_income'], reverse=True)
    await call.message.answer(
        f'<b>–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n<pre>{tabulate(sort_inviters, tablefmt="jira", numalign="left")}</pre>')  # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands="sub", is_admin=True)
async def add_balance(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
        user_id, sub_type = message.get_args().split(" ")
        if sub_type not in config.sub_types.keys():
            raise ValueError
        user_id = int(user_id)
    except ValueError:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sub {id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è} {—Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏}")
        return

    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    if not user:
        return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –∏—Å—Ç–µ–∫–ª–∞ ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
    if user["sub_time"] < datetime.now():
        base_sub_time = datetime.now()
    else:
        base_sub_time = user["sub_time"]
    sub_time = base_sub_time + timedelta(days=30)  # –î–æ–±–∞–≤–ª—è–µ–º 30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
    tokens = config.sub_types[sub_type]["tokens"]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    mj = config.sub_types[sub_type]["mj"]  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è MidJourney
    await db.update_sub_info(user_id, sub_time, sub_type, tokens, mj)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer('–ü–æ–¥–ø–∏—Å–∫–∞ –≤—ã–¥–∞–Ω–∞')  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands="balance", is_admin=True)
async def add_balance(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        user_id, value = message.get_args().split(" ")
        value = int(value)
        user_id = int(user_id)
    except ValueError:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance {id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è} {–±–∞–ª–∞–Ω—Å}")
        return
    await db.add_balance_from_admin(user_id, value)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –±–∞–∑–µ
    await message.answer('–ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω—ë–Ω')  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(commands="send")
async def enter_text(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é", reply_markup=admin_kb.cancel)
        await state.set_state(states.Mailing.enter_text)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞/—Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.message_handler(state=states.Mailing.enter_text, content_types=["text", "photo"])
async def start_send(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        return

    text = message.caption if message.photo else message.text
    photo = message.photo[-1].file_id if message.photo else None

    await message.answer("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    users = await db.get_users()
    users_list = [{"user_id": user["user_id"]} for user in users]

    await state.update_data(users=users_list, text=text, photo=photo)

    total_minutes, total_hours = await calculate_time(len(users), 0.25)

    if total_hours < 1:
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                             f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_minutes} –º–∏–Ω—É—Ç")
    else:
        await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                             f"–ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_hours:.1f} —á–∞—Å–æ–≤")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–î–∞"), KeyboardButton("–ù–µ—Ç"))

    await message.answer("–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=markup)
    await state.set_state(states.Mailing.confirm)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
@dp.message_handler(state=states.Mailing.confirm, text=["–î–∞", "–ù–µ—Ç"])
async def confirm_send(message: Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        return

    if message.text == "–ù–µ—Ç":
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        await state.finish()
        return

    user_data = await state.get_data()
    users = user_data["users"]
    text = user_data.get("text", "")
    photo = user_data.get("photo")

    await message.answer("–ù–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É...", reply_markup=ReplyKeyboardRemove())

    count = 0
    block_count = 0

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await message.bot.send_message(ADMINS_CODER, text or "[—Ä–∞—Å—Å—ã–ª–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º]")

    await state.finish()

    for user in users:
        try:
            if photo:
                await message.bot.send_photo(user["user_id"], photo=photo, caption=text or "")
            else:
                await message.bot.send_message(user["user_id"], text)
            count += 1
        except:
            block_count += 1
        await asyncio.sleep(0.1)

    await message.answer(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∏–≤—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–µ: {count}.\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞: {block_count}"
    )


async def calculate_time(N, time_per_task):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

    :param N: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    :param time_per_task: –í—Ä–µ–º—è –Ω–∞ –æ–¥–Ω—É –∑–∞–¥–∞—á—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    :return: –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –º–∏–Ω—É—Ç–∞—Ö –∏ —á–∞—Å–∞—Ö
    """
    total_seconds = N * time_per_task
    total_minutes = total_seconds / 60
    total_hours = total_minutes / 60
    return round(total_minutes, 2), round(total_hours, 2)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
@dp.message_handler(commands="freemoney", is_admin=True)
async def create_promocode(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
        amount, uses_count = message.get_args().split(" ")
        amount = int(amount)
        uses_count = int(uses_count)
    except ValueError:
        return await message.answer("–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /freemoney {—Å—É–º–º–∞} {–∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
    code = ''.join(random.sample(string.ascii_uppercase, 10))
    await db.create_promocode(amount, uses_count, code)  # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ
    promocode_url = f"{bot_url}?start=p{code}"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω, —Å—Å—ã–ª–∫–∞: {promocode_url}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∞–¥–º–∏–Ω—É


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(is_admin=True, text='admin_promo_menu')
async def admin_promo_menu(call: CallbackQuery):
    promocodes = await db.get_promo_for_stat()  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
    await call.message.answer(
        f'<b>–ë–æ–Ω—É—Å —Å—Å—ã–ª–∫–∏</b>\n\n<pre>{tabulate(promocodes, tablefmt="jira", numalign="left")}</pre>')
    await call.answer()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤
token_type_kb = ReplyKeyboardMarkup(resize_keyboard=True)
token_type_kb.add(KeyboardButton("tokens_4o"))
token_type_kb.add(KeyboardButton("tokens_o4_mini"))
token_type_kb.add(KeyboardButton("tokens_4_1"))
token_type_kb.add(KeyboardButton("tokens_o1"))
token_type_kb.add(KeyboardButton("free_image"))
token_type_kb.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
@dp.message_handler(commands="add_tokens")
async def start_token_adding(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", reply_markup=admin_kb.cancel)
        await TokenAdding.enter_user_id.set()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ user_id
@dp.message_handler(state=TokenAdding.enter_user_id, is_admin=True)
async def process_user_id(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
        return

    user_id = message.text.strip()
    user = await db.get_user(int(user_id))

    if not user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")
        return

    mj = (user['mj'] or 0) + (user['free_image'] or 0)
    mj = mj if mj >= 0 else 0

    balance_info = (f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                    f"tokens_4o: {user['tokens_4o']}\n"
                    f"tokens_o4_mini: {user['tokens_o4_mini']}\n"
                    f"tokens_4.1: {user['tokens_4_1']}\n"
                    f"tokens_o1: {user['tokens_o1']}\n"
                    f"–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®Midjourney: {mj}")


    await message.answer(balance_info)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=token_type_kb)
    await state.update_data(user_id=user_id)
    await TokenAdding.choose_token_type.set()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤
@dp.message_handler(state=TokenAdding.choose_token_type, is_admin=True)
async def choose_token_type(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
        return

    token_type = message.text.strip()
    if token_type not in ["tokens_4_1", "tokens_o1", "tokens_4o", "tokens_o4_mini","free_image"]:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")
        return

    await state.update_data(token_type=token_type)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:", reply_markup=admin_kb.cancel)
    await TokenAdding.enter_amount.set()

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤
@dp.message_handler(state=TokenAdding.enter_amount, is_admin=True)
async def process_amount(message: Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
        await state.finish()
        return

    try:
        amount = int(message.text.strip())
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'")
        return

    data = await state.get_data()
    user_id = data['user_id']
    token_type = data['token_type']

    await db.add_tokens(int(user_id), token_type, amount)

    user = await db.get_user(int(user_id))
    mj = (user['mj'] or 0) + (user['free_image'] or 0)
    mj = mj if mj >= 0 else 0

    balance_info = (f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                    f"tokens_4o: {user['tokens_4o']}\n"
                    f"tokens_o4_mini: {user['tokens_o4_mini']}\n"
                    f"tokens_4.1: {user['tokens_4_1']}\n"
                    f"tokens_o1: {user['tokens_o1']}\n"
                    f"–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®Midjourney: {mj}")

    await message.answer(balance_info)

    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–µ—Å—Ç)
@dp.message_handler(commands="refill_tokens")
async def start_refill_tokens(message: Message, state: FSMContext):
    if message.from_user.id in ADMINS:
        await refill_tokens()




def get_admin_commands():
    return {
        "/stats": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "#switch_to_goapi": "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ **GoAPI**",
        "#switch_to_apiframe": "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ **ApiFrame**",
        "/sub": "–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "/balance": "–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "/send": "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π",
        "/freemoney": "–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥",
        "/add_tokens": "–ù–∞—á–∏—Å–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã"
    }

@dp.message_handler(commands="admin_help")
async def admin_help(message: Message):
    if message.from_user.id not in ADMINS:
        return

    commands = get_admin_commands()
    response = "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
    response += "\n".join([f"{cmd} - {desc}" for cmd, desc in commands.items()])

    await message.answer(response)



handlers\ref.py
from aiogram.types import Message, CallbackQuery, ChatActions
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext

from utils import db, ai, more_api  # –ú–æ–¥—É–ª–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ API
from states import user as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (FSM)
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
from config import bot_url
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤


# –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
invalid_purse_text = {'qiwi': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 79111111111',
                      'bank_card': '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 4012888812345678'}


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
@dp.callback_query_handler(text='withdraw_ref_menu')
async def withdraw_ref_menu(call: CallbackQuery):

    user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    if user['ref_balance'] >= 100:
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 100 —Ä—É–±–ª–µ–π), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
        await call.message.answer(
            f'''<b>üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

<b>–ë–∞–ª–∞–Ω—Å</b>: {user["ref_balance"]} —Ä—É–±–ª–µ–π

–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ë–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, QIWI –∫–æ—à–µ–ª—ë–∫, –∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞—à–∏—Ö —É—Å–ª—É–≥ –≤ –±–æ—Ç–µ.''',
            reply_markup=user_kb.withdraw_ref_menu)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–≤–æ–¥–∞
    else:
        # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 100 —Ä—É–±–ª–µ–π, –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
        await call.message.answer('<b>‚ùóÔ∏è–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 100 —Ä—É–±–ª–µ–π</b>')
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith='withdraw_ref'))
async def withdraw_ref(call: CallbackQuery, state: FSMContext):

    withdraw_type = call.data.split(':')[1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –≤—ã–≤–æ–¥–∞ (–±–∞–Ω–∫, QIWI –∏–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å)
    if withdraw_type == 'bank_card':
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—ã–≤–æ–¥ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 4012888812345678', reply_markup=user_kb.cancel)
    elif withdraw_type == 'qiwi':
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—ã–≤–æ–¥ –Ω–∞ QIWI, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 79111111111', reply_markup=user_kb.cancel)
    elif withdraw_type == 'balance':
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤—ã–≤–æ–¥ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞, —Å—Ä–∞–∑—É –∑–∞—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å
        await db.add_balance_from_ref(call.from_user.id)  # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞
        await call.message.answer('–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å')
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    await states.EnterWithdrawInfo.purse.set()
    await state.update_data(withdraw_type=withdraw_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤—ã–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (–≤–≤–æ–¥ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤)
@dp.message_handler(state=states.EnterWithdrawInfo.purse)
async def finish_withdraw_ref(message: Message, state: FSMContext):

    state_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–∏–ø –≤—ã–≤–æ–¥–∞)
    withdraw_type = state_data['withdraw_type']
    try:
        purse = int(message.text)  # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —á–∏—Å–ª–æ
    except ValueError:
        await message.answer(invalid_purse_text[withdraw_type])  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞
    if withdraw_type == 'qiwi':
        if len(str(purse)) != 11:  # –î–ª—è QIWI –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä
            await message.answer(invalid_purse_text[withdraw_type])
            return
    elif withdraw_type == 'bank_card':
        if len(str(purse)) != 16:  # –î–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 16 —Ü–∏—Ñ—Ä
            await message.answer(invalid_purse_text[withdraw_type])
            return

    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    withdraw_data = more_api.withdraw_ref_balance(purse, user['ref_balance'], withdraw_type)  # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ API
    if withdraw_data['status'] == 'error':
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ
        if withdraw_data['desc'].startswith('Invalid Purse'):
            await message.answer(invalid_purse_text[withdraw_type])  # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
            return
        else:
            await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {withdraw_data["desc"]}')  # –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω—É–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await db.add_withdraw(message.from_user.id, user['ref_balance'])
    await db.reset_ref_balance(message.from_user.id)
    await message.answer('–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç —Å–∫–æ—Ä–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã')  # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–≤–æ–¥–µ


handlers\sub.py
import logging
from datetime import datetime, timedelta

from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery

import config
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–≤—ã–±–æ—Ä –ø–æ–¥–ø–∏—Å–∫–∏, –æ–ø–ª–∞—Ç–∞)
import utils
from config import ADMINS_CODER
from create_bot import dp  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
from utils import db, pay  # –ú–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏

vary_types = {"subtle": "Subtle", "strong": "Strong"}  # –¢–∏–ø—ã –≤–∞—Ä–∏–∞—Ü–∏–π –¥–ª—è MidJourney

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ–ø–ª–∞—Ç—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
def get_pay_urls(order_id, amount):
    return {
        "tinkoff": pay.get_pay_url_tinkoff(order_id, amount),  # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Tinkoff
        "freekassa": pay.get_pay_url_freekassa(order_id, amount),  # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
        "payok": pay.get_pay_url_payok(order_id, amount),  # –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayOK
    }


'''–ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ - GPT –∏–ª–∏ MJ'''

# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ–∂–¥—É ChatGPT –∏ MidJourney
@dp.callback_query_handler(text="buy_sub") 
async def choose_neural_network(call: CallbackQuery):
    
    await call.message.edit_text("""
–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å‚§µÔ∏è""", 
    reply_markup=user_kb.get_neural_network_menu())


# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT
@dp.callback_query_handler(text="select_gpt_tokens")
async def choose_gpt_tokens(call: CallbackQuery):

    user_id = call.from_user.id
    
    await call.message.edit_text("""
–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å ChatGPT‚§µÔ∏è""", 
    reply_markup=user_kb.get_chatgpt_models())


# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT
@dp.callback_query_handler(Text(startswith="buy_chatgpt_tokens"))
async def choose_chatgpt_tokens(call: CallbackQuery):

    user_id = call.from_user.id
    model = call.data.split(":")[1]
    mode = call.data.split(":")[2]

    logger.info(f"User ID: {user_id}, –º–æ–¥–µ–ª—å ChatGPT: {model}, —Å–∫–∏–¥–æ—á–Ω–æ–µ : {mode}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user_notified_gpt(user_id)
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    if user_data and user_data['last_notification']:
        last_notification = user_data['last_notification']
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
        if now < last_notification + timedelta(hours=24):
            await call.message.edit_text('''
–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–æ <b>—Å–∫–∏–¥–∫–æ–π<b>
–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ </b>24 —á–∞—Å–∞‚§µÔ∏è</b>''',
                reply_markup=user_kb.get_chatgpt_tokens_menu('discount', model)
            )
            return

    if mode == 'discount':
        answer = '''
–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–æ <b>—Å–∫–∏–¥–∫–æ–π<b>
–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ </b>24 —á–∞—Å–∞‚§µÔ∏è</b>'''
    else:
        answer = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤‚§µÔ∏è"
    
    await call.message.edit_text(
        answer,
        reply_markup=user_kb.get_chatgpt_tokens_menu(mode, model)
    )


# –ú–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
@dp.callback_query_handler(text="buy_midjourney_requests")
async def choose_midjourney_requests(call: CallbackQuery):
    user_id = call.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await db.get_user_notified_mj(user_id)
    now = datetime.now()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
    if user_data and user_data['last_notification']:
        last_notification = user_data['last_notification']
        
        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
        if now < last_notification + timedelta(hours=24):
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ —Å–∫–∏–¥–∫–æ–π‚§µÔ∏è",
                reply_markup=user_kb.get_midjourney_discount_requests_menu()
            )

    await call.message.edit_text("""
–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤‚§µÔ∏è""",
    reply_markup=user_kb.get_midjourney_requests_menu())


# –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT
@dp.callback_query_handler(Text(startswith="tokens:"))
async def handle_chatgpt_tokens_purchase(call: CallbackQuery):

    user_id = call.from_user.id
    logger.info(f"User ID: {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT: {call.data}") 

    tokens = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    model = str(call.data.split(":")[2])  # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –°hatGPT
    amount = int(call.data.split(":")[3])  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
    src = str(call.data.split(":")[4])  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞

    logger.info(f"–†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–π callback: {tokens}, {model}, {amount}, {src}")
    
    discounts = {189, 315, 412, 628, 949, 1619, 2166, 3199, 227, 386, 509, 757}
    user_discount = await db.get_user_notified_gpt(user_id)

    if user_discount is None or (user_discount['used'] != True or (user_discount['used'] == True and amount not in discounts)):
        
        if amount in discounts:  # –ü–æ–∫—É–ø–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π. –ü–û –•–û–†–û–®–ï–ú–£, –î–û–õ–ñ–ù–ê –°–†–ê–ë–ê–¢–´–í–ê–¢–¨ –ü–û–°–õ–ï –û–ü–õ–ê–¢–´...
            await db.update_used_discount_gpt(user_id)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = await db.add_order(call.from_user.id, amount, model, tokens)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        urls = get_pay_urls(order_id, amount)
    
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await call.message.edit_text(f"‚úÖ{int(tokens / 1000)} —Ç—ã—Å. —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-{model}\nüí∞–°—É–º–º–∞: {amount}‚ÇΩ.",
                                     reply_markup=user_kb.get_pay_urls(urls, order_id, model, src))
    
    else:
        await call.message.edit_text("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É")

# –†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Midjourney
@dp.callback_query_handler(Text(startswith="select_midjourney_requests:"))
async def handle_midjourney_requests_purchase(call: CallbackQuery):

    user_id = call.from_user.id
    requests_count = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    amount = int(call.data.split(":")[2])  # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    src = str(call.data.split(":")[3])  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è - –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    discounts = {246, 550, 989}
    user_discount = await db.get_user_notified_mj(user_id)

    if user_discount is None or (user_discount['used'] != True or (user_discount['used'] == True and amount not in discounts)):
        
        if amount in discounts:  # –ü–æ–∫—É–ø–∫–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π
            await db.update_used_discount_mj(user_id)
        model = "midjourney"
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order_id = await db.add_order(call.from_user.id, amount, model, requests_count)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
        urls = get_pay_urls(order_id, amount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        await call.message.edit_text(f"‚úÖ{requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è üé®MidJourney\nüí∞–°—É–º–º–∞: {amount}‚ÇΩ.",
                                     reply_markup=user_kb.get_pay_urls(urls, order_id, model, src))
    else:
        await call.message.edit_text("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–∫–∏–¥–∫—É")


# –£–≤–µ–¥–æ–º–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ GPT
@dp.callback_query_handler(text="back_to_discount")
async def back_to_discount_notification(call: CallbackQuery):

    logger.info('back_to_discount')

    await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!
–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –º–æ–¥–µ–ª—å‚§µÔ∏è
    """, reply_markup=user_kb.get_chatgpt_models_noback('discount'))
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram (–ø—Ä–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª)
@dp.callback_query_handler(Text(startswith="tg_stars:"))
async def back_to_buy_vpn(call: CallbackQuery):

    order_id = call.data.split(":")[1]  # –¢–µ–ø–µ—Ä—å order_id –æ—Å—Ç–∞—ë—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
    order = await db.get_order(order_id)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ get_order –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
    user_id = call.from_user.id
    amount = order["amount"]  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö

    await db.add_star(user_id, amount, order_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
    await call.bot.send_invoice(call.from_user.id,
                                title="–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
                                description=f"""üí∞ –°—É–º–º–∞: {order['amount']} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏""",
                                provider_token="",  # –¢–æ–∫–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ø–ª–∞—Ç–µ–∂–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
                                payload=f"{order_id}",  # ID –∑–∞–∫–∞–∑–∞
                                currency="XTR",  # –í–∞–ª—é—Ç–∞ –æ–ø–ª–∞—Ç—ã
                                prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=order["amount"] // 2)],  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ order["amount"] // 2
                                reply_markup=user_kb.get_tg_stars_pay()  # –ö–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã
                                )
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
@dp.pre_checkout_query_handler()
async def approve_order(pre_checkout_query: PreCheckoutQuery):

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∑–∞–∫–∞–∑ (–æ–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞)
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
@dp.message_handler(content_types="successful_payment")
async def process_successful_payment(message: Message):
    order_id = message.successful_payment.invoice_payload  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ payload
    await utils.pay.process_purchase(message.bot, order_id)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É (–æ–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–≤–µ–∑–¥–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É stars
    await db.mark_star_paid(order_id)


# –•—ç–Ω–¥–ª–¥–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É Tinkoff:
@dp.callback_query_handler(Text(startswith="open_url"))
async def open_url(call: CallbackQuery):
    
    splitted = call.data.split(":")
    url = str(splitted[1] + ":" + splitted[2])

    await call.bot.send_message(call.from_user.id, f'–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É:\n{url}\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ —Å—Ç–æ—Ä–æ–Ω–Ω–µ–º –±—Ä–∞—É–∑–µ—Ä–µ\n\
–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —á–µ—Ä–µ–∑ Telegram-–±—Ä–∞—É–∑–µ—Ä')

    await call.answer()


handlers\users.py
import logging
from datetime import datetime, timedelta
from typing import List
from aiogram import Bot
from aiogram.types import Message, CallbackQuery, ChatActions, ContentType, MediaGroup, Update, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram.types.input_file import InputFile
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
import re
import tempfile
import os

from keyboards.user import image_openai_menu, partner
from states.user import EnterChatName, EnterChatRename
from utils import db, ai, more_api, pay  # –ò–º–ø–æ—Ä—Ç —É—Ç–∏–ª–∏—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ë–î –∏ –≤–Ω–µ—à–Ω–∏–º–∏ API
from states import user as states  # –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
import keyboards.user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from config import bot_url, TOKEN, NOTIFY_URL, bug_id, PHOTO_PATH, MJ_PHOTO_BASE_URL, ADMINS_CODER, check_channel
from create_bot import dp, bot  # –î–∏—Å–ø–µ—Ç—á–µ—Ä –∏–∑ create_bot.py
from utils.ai import mj_api, text_to_speech, voice_to_text
from aiogram.utils.exceptions import CantParseEntities
import html

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

vary_types = {"subtle": "Subtle", "strong": "Strong"}  # –¢–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º

'''
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
async def check_promocode(user_id, code, bot: Bot):

    promocode = await db.get_promocode_by_code(code)  # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ –∫–æ–¥—É
    if promocode is None:
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
    user_promocode = await db.get_user_promocode_by_promocode_id_and_user_id(promocode["promocode_id"], user_id)
    all_user_promocode = await db.get_all_user_promocode_by_promocode_id(promocode["promocode_id"])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø—Ä–∏–º–µ–Ω—è–µ–º –µ–≥–æ
    if user_promocode is None and len(all_user_promocode) < promocode["uses_count"]:
        await db.create_user_promocode(promocode["promocode_id"], user_id)
        await db.add_balance(user_id, promocode['amount'], is_promo=True)  # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await bot.send_message(user_id, f"<b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {promocode['amount']} —Ä—É–±–ª–µ–π.</b>")
    else:
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        if user_promocode is not None:
            await bot.send_message(user_id, "<b>–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –±—ã–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –í–∞–º–∏ —Ä–∞–Ω–µ–µ.</b>")
        elif len(all_user_promocode) >= promocode["uses_count"]:
            await bot.send_message(user_id, "<b>–°—Å—ã–ª–∫–∞ –∏—Å—á–µ—Ä–ø–∞–ª–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π.</b>")
'''


# –°–Ω–∏–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_balance(bot: Bot, user_id):
    await db.remove_balance(user_id)
    user = await db.get_user(user_id)
    # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ 50, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    if user["balance"] <= 50:
        await db.update_stock_time(user_id, int(datetime.now().timestamp()))
        await bot.send_message(user_id, """‚ö†Ô∏è–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –±–∞–ª–∞–Ω—Å!
–£—Å–ø–µ–π –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–∏ 24 —á–∞—Å–æ–≤ –∏ –ø–æ–ª—É—á–∏ –Ω–∞ —Å—á—ë—Ç +10% –æ—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚§µÔ∏è""",
                               reply_markup=user_kb.get_pay(user_id, 10))  # –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
async def not_enough_balance(bot: Bot, user_id: int, ai_type: str):
    now = datetime.now()
    if ai_type == "chatgpt":
        user = await db.get_user(user_id)
        model = user["gpt_model"]
        if model == '4o-mini':
            return
        logger.info(f"–¢–æ–∫–µ–Ω—ã –¥–ª—è ChatGPT –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. User: {user}, Model: {model}")

        model_map = {'4o': 'ChatGPT',
                     '4_1': 'GPT-4.1',
                     'o1': 'GPT-o1',
                     'o4-mini': 'GPT-o4-mini'}

        user_data = await db.get_user_notified_gpt(user_id)

        if not model == '4o':
            await db.set_model(user_id, "4o")

            await bot.send_message(user_id, "‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ GPT-4o")

        if model == '4o':
            keyboard = user_kb.get_chatgpt_models_noback()
        else:
            keyboard = user_kb.get_chatgpt_tokens_menu('normal', model)

        await bot.send_message(user_id,
                               f"‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –¥–ª—è {model_map[model]} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è",
                               reply_markup=keyboard)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤

    elif ai_type == "image":
        user_data = await db.get_user_notified_mj(user_id)

        if user_data and user_data['last_notification']:
            last_notification = user_data['last_notification']

            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—ã–ª–æ –º–µ–Ω–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–æ —Å–∫–∏–¥–∫–æ–π
            if now < last_notification + timedelta(hours=24):
                await bot.send_message(user_id, """
‚ö†Ô∏è–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è Midjourney –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è
                """,
                                       reply_markup=user_kb.get_midjourney_discount_requests_menu()
                                       )
                return
        await bot.send_message(user_id, """
‚ö†Ô∏è–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è Midjourney –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è
        """,
                               reply_markup=user_kb.get_midjourney_requests_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

    elif ai_type == "image_openai":
        await bot.send_message(user_id, """
        ‚ö†Ô∏è–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI" –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!

        –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è
                """,
                               reply_markup=user_kb.get_midjourney_requests_menu())


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney
async def get_mj(prompt, user_id, bot: Bot):
    user = await db.get_user(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(bot, user_id, "image")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
        return

    await bot.send_message(user_id, "–û–∂–∏–¥–∞–π—Ç–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..üïô",
                           reply_markup=user_kb.get_menu(user["default_ai"]))
    # await bot.send_message(user_id, "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
    await bot.send_chat_action(user_id, ChatActions.UPLOAD_PHOTO)

    if '‚Äî' in prompt:
        prompt.replace('‚Äî', '--')

    res = await ai.get_mdjrny(prompt, user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API

    logger.info(f"MidJourney: {res}")

    if res is None:
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        return
    elif ('Banned Prompt' in res):
        await bot.send_message(user_id, f"–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ –∑–∞–ø—Ä–æ—Å–µ:\n\n{res}")
        return
    elif ('Invalid image prompt position' in res):
        await bot.send_message(user_id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞:\n\n{res}")
        return
    elif ('status' in res) and (res['status'] == "failed"):
        await bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:\n\n{res['message']}")
        return

    await db.mark_used_trial(user_id)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
    now = datetime.now()
    user_notified = await db.get_user_notified_mj(user_id)
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if 1 < user["mj"] <= 3:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        if user_notified is None:
            await db.create_user_notification_mj(user_id)
            await notify_low_midjourney_requests(user_id, bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_mj(user_id)
                await notify_low_midjourney_requests(user_id, bot)

async def gen_image_openai(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=image_openai_menu)


def split_message(text: str, max_length: int, is_code: bool = False) -> list:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ max_length, —Å —É—á–µ—Ç–æ–º –∫–æ–¥–∞."""
    lines = text.split('\n')
    parts = []
    current_part = ""

    for line in lines:
        if len(current_part) + len(line) + 1 > max_length:
            parts.append(current_part)
            current_part = ""
        current_part += line + '\n'

    if current_part:
        parts.append(current_part)

    if is_code:
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –≤ <pre><code>...</code></pre>
        return [f"<pre><code>{part.strip()}</code></pre>" for part in parts]

    return parts


def process_formula(match):
    formula = match.group(1)

    # –ó–∞–º–µ–Ω—ã –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    formula = re.sub(r"\\frac\{(.*?)\}\{(.*?)\}", r"\1 / \2", formula)  # \frac{a}{b} ‚Üí a / b
    formula = re.sub(r"\\text\{(.*?)\}", r"\1", formula)  # \text{...} ‚Üí –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    formula = formula.replace(r"\times", "√ó").replace(r"\cdot", "¬∑")  # –£–º–Ω–æ–∂–µ–Ω–∏–µ
    formula = formula.replace(r"\implies", "‚áí").replace(r"\approx", "‚âà")  # –°–∏–º–≤–æ–ª—ã –ª–æ–≥–∏–∫–∏
    formula = re.sub(r"\\sqrt\{(.*?)\}", r"‚àö(\1)", formula)  # –ö–æ—Ä–µ–Ω—å: \sqrt{a} ‚Üí ‚àö(a)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–ø–µ–Ω–µ–π: x^2 ‚Üí x¬≤ (–¥–ª—è —Ü–∏—Ñ—Ä 0‚Äì9)
    def replace_power(m):
        base, exp = m.group(1), m.group(2)
        try:
            exp_int = int(exp)
            if 0 <= exp_int <= 9:
                return f"{base}{chr(8304 + exp_int)}"
            else:
                return f"{base}^{exp}"  # –¥–ª—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ç–µ–ø–µ–Ω–µ–π
        except ValueError:
            return f"{base}^{exp}"
    formula = re.sub(r"([a-zA-Z])\^([0-9]+)", replace_power, formula)

    # –ò–Ω–¥–µ–∫—Å—ã: t_1 ‚Üí t‚ÇÅ
    def replace_subscript(m):
        base, sub = m.group(1), m.group(2)
        try:
            sub_int = int(sub)
            if 0 <= sub_int <= 9:
                return f"{base}{chr(8320 + sub_int)}"
            else:
                return f"{base}_{sub}"
        except ValueError:
            return f"{base}_{sub}"
    formula = re.sub(r"([a-zA-Z])_([0-9]+)", replace_subscript, formula)

    # –£–≥–ª—ã: \degree ‚Üí ¬∞
    formula = re.sub(r"\\degree", "¬∞", formula)

    # –ì—Ä–µ—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã
    greek_letters = {
        r"\alpha": "Œ±", r"\beta": "Œ≤", r"\gamma": "Œ≥", r"\delta": "Œ¥", r"\epsilon": "Œµ",
        r"\zeta": "Œ∂", r"\eta": "Œ∑", r"\theta": "Œ∏", r"\iota": "Œπ", r"\kappa": "Œ∫",
        r"\lambda": "Œª", r"\mu": "Œº", r"\nu": "ŒΩ", r"\xi": "Œæ", r"\omicron": "Œø",
        r"\pi": "œÄ", r"\rho": "œÅ", r"\sigma": "œÉ", r"\tau": "œÑ", r"\upsilon": "œÖ",
        r"\phi": "œÜ", r"\chi": "œá", r"\psi": "œà", r"\omega": "œâ"
    }
    for latex, symbol in greek_letters.items():
        formula = formula.replace(latex, symbol)

    # –ó–∞–º–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–µ—á–∏—Ç–∞–±–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    formula = formula.replace("‚Å≤", "¬≤")

    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –Ω–∞–¥—Å—Ç—Ä–æ—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ ¬≤ –∏ ¬≥
    formula = re.sub(r"[‚Å∞¬π¬≤¬≥‚Å¥‚Åµ‚Å∂‚Å∑‚Å∏‚Åπ‚Å∫‚Åª‚Åº‚ÅΩ‚Åæ‚Åø]", lambda m: m.group(0) if m.group(0) in "¬≤¬≥" else "", formula)

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ \ (–ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–º–µ–Ω)
    formula = formula.replace("\\", "")

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
    return f"<pre>{html.escape(formula.strip())}</pre>"


def format_math_in_text(text: str) -> str:
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª –≤–Ω—É—Ç—Ä–∏ \[ ... \] –∏–ª–∏ \( ... \)
    text = re.sub(r"\\\[(.*?)\\\]", process_formula, text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª –≤–Ω—É—Ç—Ä–∏ \[...\]
    text = re.sub(r"\\\((.*?)\\\)", process_formula, text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—É–ª –≤–Ω—É—Ç—Ä–∏ \(...\)

    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ HTML –≤ —Ç–µ–∫—Å—Ç–µ
    return html.escape(text)


async def send_message_with_html(bot: Bot, chat_id: int, text: str, reply_markup=None):
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
        await bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=reply_markup)
    except CantParseEntities:
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ HTML
        escaped_text = html.escape(text)
        await bot.send_message(chat_id, escaped_text, parse_mode="HTML", reply_markup=reply_markup)
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        await bot.send_message(chat_id, text, reply_markup=reply_markup)


def ensure_code_block_integrity(text: str) -> str:
    """–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ <pre><code> –∏ </code></pre> –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."""
    has_open = "<pre><code>" in text
    has_close = "</code></pre>" in text

    if has_open and not has_close:
        return text + "</code></pre>"
    elif has_close and not has_open:
        return "<pre><code>" + text
    return text


async def get_gpt(prompt, messages, user_id, bot: Bot, state: FSMContext):

    text = '‚è≥ChatGPT –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –æ–∂–∏–¥–∞–π—Ç–µ...'

    message_wait = await bot.send_message(user_id, text)

    user = await db.get_user(user_id)
    lang_text = {"en": "compose an answer in English", "ru": "—Å–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"}
    model = user['gpt_model']
    model_dashed = model.replace("-", "_")

    current_chat = await db.get_chat_by_id(user["current_chat_id"])
    summary = current_chat["summary"] if current_chat else ""
    keywords = current_chat["keywords"] if current_chat and current_chat.get("keywords") else []

    if summary:
        prompt = f"–†–∞–Ω–µ–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ–±—Å—É–∂–¥–∞–ª–æ—Å—å: {summary.strip()}\n\n" + prompt
    if keywords:
        joined_keywords = ', '.join(keywords)
        prompt = f"–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å: {joined_keywords}\n\n" + prompt

    prompt += f"\n{lang_text[user['chat_gpt_lang']]}"
    prompt += """
    –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ Telegram, –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:

    1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ø–í–ù–û –ø—Ä–æ—Å–∏—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≥–æ–≤–æ—Ä–∏—Ç ¬´–ø–æ–∫–∞–∂–∏ –∫–æ–¥¬ª, ¬´–Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é¬ª, ¬´–ø—Ä–∏–º–µ—Ä –∫–æ–¥–∞¬ª –∏ —Ç.–ø.), —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞ –≤–∫–ª—é—á–∞–π –∫–æ–¥ –≤ –æ—Ç–≤–µ—Ç.
    2. –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–¥:
       - –û–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 2000 —Å–∏–º–≤–æ–ª–æ–≤.
       - –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–∫–ª—é—á–µ–Ω –≤ –±–ª–æ–∫–∏ <pre><code> </code></pre> –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (parse_mode="HTML"), —á—Ç–æ–±—ã –∫–æ–¥ –±—ã–ª –≤–∏–¥–µ–Ω –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç.
    3. –ï—Å–ª–∏ –∫–æ–¥ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π –±–ª–æ–∫ <code> </code>, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –µ–≥–æ –∫–∞–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞.
    4. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–µ—Ç–∫–æ –≤—ã–¥–µ–ª–µ–Ω –∏ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π —Ç–∏–ø–∞ "--------------------------------------------------".
    5. –ï—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç HTML –∏–ª–∏ –¥—Ä—É–≥–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞–∑–º–µ—Ç–∫–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –∏—Ö —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∏—Å—å –≤–µ—Ä–Ω–æ –≤ Telegram. –î–ª—è —ç—Ç–æ–≥–æ HTML-–∫–æ–¥ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–µ—Ä–Ω—É—Ç –≤ –±–ª–æ–∫–∏ <pre><code> </code></pre>.
    6. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ª—é–±—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ –∏–ª–∏ –∞–º–ø–µ—Ä—Å–∞–Ω–¥ –≤ HTML) –ø—Ä–∞–≤–∏–ª—å–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏.
    """

    message_user = prompt

    if messages is None:
        messages = []
    messages.append({"role": "user", "content": prompt})

    logger.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ ChatGPT. User: {user}, Model: {model}, tokens: {user[f'tokens_{model_dashed}']}")

    await bot.send_chat_action(user_id, ChatActions.TYPING)

    res = await ai.get_gpt(messages, model)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–∂–∏–¥–∞–Ω–∏–µ..."
    try:
        await bot.delete_message(chat_id=user_id, message_id=message_wait.message_id)
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è: {e}")

    # –®–∞–≥ 1: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—É–ª—ã –≤–Ω—É—Ç—Ä–∏ \( \)
    html_content = format_math_in_text(res["content"])

    # –ò—â–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –æ–±—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞
    code_blocks = re.findall(r"(<pre><code>.*?</code></pre>)", html_content, re.DOTALL)
    non_code_content = re.sub(r"<pre><code>.*?</code></pre>", "", html_content, flags=re.DOTALL)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Ä–µ–∞–ª—å–Ω—ã–µ
    non_code_content = html.unescape(non_code_content)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –æ—Ç–¥–µ–ª—å–Ω–æ
    for code in code_blocks:
        code = html.unescape(code)

        if len(code) > 3000:
            parts = split_message(code, 3000)
            for part in parts:
                part = ensure_code_block_integrity(part)
                await send_message_with_html(bot, user_id, part, reply_markup=user_kb.get_clear_or_audio())
        else:
            code = ensure_code_block_integrity(code)
            await send_message_with_html(bot, user_id, code, reply_markup=user_kb.get_clear_or_audio())

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    if len(non_code_content) <= 3000:
        non_code_content = ensure_code_block_integrity(non_code_content)
        await send_message_with_html(bot, user_id, non_code_content, reply_markup=user_kb.get_clear_or_audio())
    else:
        parts = split_message(non_code_content, 3000)
        for idx, part in enumerate(parts):
            part = ensure_code_block_integrity(part)
            if idx == len(parts) - 1:
                await send_message_with_html(bot, user_id, part, reply_markup=user_kb.get_clear_or_audio())
            else:
                await send_message_with_html(bot, user_id, part)

    await state.update_data(content=res["content"])

    if not res["status"]:
        return

    message_gpt = res["content"]
    messages.append({"role": "assistant", "content": message_gpt})

    if not current_chat:
        generated_name = await generate_chat_name(message_user, model, message_gpt)
        new_chat_id = await db.create_chat(user_id, name=generated_name, summary="")
        await db.set_current_chat(user_id, new_chat_id)
        chat_id = new_chat_id
    else:
        chat_id = current_chat["id"]

    await db.add_message(chat_id, user_id, message_user)
    await db.add_message(chat_id, None, message_gpt)
    keywords = await extract_keywords_from_message(message_user, chat_id, model)
    await update_chat_keywords(chat_id, keywords)

    old_summary = current_chat["summary"] if current_chat else ""
    new_summary = await update_chat_summary(chat_id, message_user, message_gpt, model, old_summary)
    await db.update_chat_summary(chat_id, new_summary)

    await db.remove_chatgpt(user_id, res["tokens"], model)
    await db.mark_used_trial(user_id)

    now = datetime.now()
    user_notified = await db.get_user_notified_gpt(user_id)
    user = await db.get_user(user_id)
    has_purchase = await db.has_matching_orders(user_id)

    if user[f"tokens_{model_dashed}"] <= 1000 and model_dashed != "4o":
        logger.info(
            f"–û—Å—Ç–∞–ª–æ—Å—å {user[f'tokens_{model_dashed}']} —Ç–æ–∫–µ–Ω–æ–≤, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {user_notified}, –ø–æ–∫—É–ø–∫–∞: {has_purchase}")
        if user_notified is None and has_purchase:
            await db.create_user_notification_gpt(user_id)
            await notify_low_chatgpt_tokens(user_id, bot)
        else:
            last_notification = user_notified['last_notification'] if user_notified else None
            if (last_notification is None or now > last_notification + timedelta(days=30)) and has_purchase:
                await db.update_user_notification_gpt(user_id)
                await notify_low_chatgpt_tokens(user_id, bot)

    await db.add_action(user_id, model)

    return messages


async def update_chat_keywords(chat_id: int, new_keywords: list[str]):
    if not new_keywords:
        return
    conn = await db.get_conn()

    row = await conn.fetchrow("SELECT keywords FROM chats WHERE id = $1", chat_id)
    existing_keywords = row["keywords"] if row and row["keywords"] else []

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
    combined_keywords = list(set(existing_keywords + new_keywords))[:20]  # –º–∞–∫—Å–∏–º—É–º 20 —Å–ª–æ–≤

    await conn.execute(
        "UPDATE chats SET keywords = $1, updated_at = NOW() WHERE id = $2",
        combined_keywords, chat_id
    )
    await conn.close()

async def extract_keywords_from_message(message: str, chat_id: int, model: str) -> list[str]:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–æ–≤–∞ "–∑–∞–ø–æ–º–Ω–∏"
    must_extract = "–∑–∞–ø–æ–º–Ω–∏" in message.lower()

    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
        f"{message}\n\n"
    )

    if must_extract:
        prompt += (
            "–¢–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç '–∑–∞–ø–æ–º–Ω–∏', –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–¥–µ–ª–∏ –¥–æ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑, "
            "–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∫–∞–∂—É—Ç—Å—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏. "
            "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Python-—Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "['–≤–∞–∂–Ω–æ–µ', '–∑–∞–ø–æ–º–Ω–∏—Ç—å', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è']\n"
        )
    else:
        prompt += (
            "–í—ã–¥–µ–ª–∏ –¥–æ 5 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ—Ä–∞–∑ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å), –æ–ø–∏—Å—ã–≤–∞—é—â–∏—Ö —Å—É—Ç—å –∏–ª–∏ –≤–∞–∂–Ω—ã–µ —Ç–µ–º—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏. "
            "–ï—Å–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–µ—Ç ‚Äî –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ []. –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Python-—Å–ø–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫."
        )

    response = await ai.get_gpt(
        messages=[
            {"role": "system", "content": "–¢—ã –∏–∑–≤–ª–µ–∫–∞–µ—à—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."},
            {"role": "user", "content": prompt}
        ],
        model=model
    )

    try:
        keywords = eval(response["content"])
        if isinstance(keywords, list) and all(isinstance(k, str) for k in keywords):
            return keywords
    except Exception:
        pass
    return []


async def update_chat_summary(chat_id: int, message_user: str, message_gpt: str, model: str,
                              old_summary: str = "") -> str:
    summary_prompt = (
        f"–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥—ã: {old_summary}\n\n"
        f"–î–æ–±–∞–≤—å –∫ –Ω–µ–º—É –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞:\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message_user}\n"
        f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {message_gpt}\n\n"
        f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (–º–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

    response = await ai.get_gpt(
        messages=[
            {"role": "system",
             "content": "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —É–º–µ—é—â–∏–π —Å–∂–∏–º–∞—Ç—å –¥–∏–∞–ª–æ–≥–∏ –≤ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
            {"role": "user", "content": summary_prompt}
        ],
        model=model
    )

    return response["content"].strip()

# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –ø—Ä–∏ –ø–æ–º–æ—â–∏ GPT
async def generate_chat_name(message_user: str, model: str, message_gpt: str) -> str:
    prompt = (
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: \"{message_user}\"\n"
        f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∏–ª: \"{message_gpt}\"\n\n"
        f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏–¥—É–º–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ, –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):"
    )

    response = await ai.get_gpt(
        messages=[
            {"role": "system", "content": "–¢—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤."},
            {"role": "user", "content": prompt}
        ],
        model=model
    )

    return response["content"].strip().strip('"')[:50]


async def generate_example_prompt() -> str:
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–∏–º–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ ChatGPT (–Ω–µ –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤). "
        "–≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π, –Ω–æ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä–Ω–æ –∫–∞–∫: "
        "\"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ç–µ–æ—Ä–∏—é —Å—Ç—Ä—É–Ω\" –∏–ª–∏ \"–ù–∞–ø–∏—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è\". "
        "–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É."
    )

    response = await ai.get_gpt(
        messages=[
            {"role": "system", "content": "–¢—ã –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è ChatGPT."},
            {"role": "user", "content": prompt}
        ],
        model="4o"  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –º–æ–¥–µ–ª—å
    )

    return response["content"].strip().strip('"')



''' –ù–æ–≤—ã–µ –¥–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Ç–æ–∫–µ–Ω–∞—Ö '''


# –£–≤–µ–¥–æ–º–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤ GPT
async def notify_low_chatgpt_tokens(user_id, bot: Bot):
    logger.info('–í–Ω—É—Ç—Ä–∏ —Å–∫–∏–¥–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –≤—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å')

    await bot.send_message(user_id, """
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!
–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –í–∞—Å –º–æ–¥–µ–ª—å‚§µÔ∏è
    """, reply_markup=user_kb.get_chatgpt_models_noback('discount'))


# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney
async def notify_low_midjourney_requests(user_id, bot: Bot):
    await bot.send_message(user_id, """
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üé®Midjourney
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
    """, reply_markup=user_kb.get_midjourney_discount_notification())


# @dp.errors_handler()
# async def log_all_updates(update: Update, exception: Exception = None):
#     logging.debug(f"Update received: {update.to_python()}")
#     if exception:
#         logging.error(f"Exception: {exception}")
#     return True

'''
@dp.callback_query_handler()
async def all_callback_handler(call: CallbackQuery):
    logging.info(f"Received callback_data: {call.data}")
    await call.message.answer("Callback received")
'''


# –•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(state="*", commands='start')
async def start_message(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ª—é–±–æ–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã /start (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –∫–æ–¥—ã)
    msg_args = message.get_args().split("_")
    inviter_id = 0
    code = None
    if msg_args != ['']:
        for msg_arg in msg_args:
            if msg_arg[0] == "r":
                try:
                    inviter_id = int(msg_arg[1:])
                except ValueError:
                    continue
            elif msg_arg[0] == "p":
                code = msg_arg[1:]

    user = await db.get_user(message.from_user.id)

    if user is None:
        await db.add_user(message.from_user.id, message.from_user.username, message.from_user.first_name,
                          int(inviter_id))
        default_ai = "chatgpt"
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if inviter_id != 0:
            try:
                await bot.send_message(inviter_id,
                    f"""üìà–£ –í–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª
‚îî –ê–∫–∫–∞—É–Ω—Ç: {message.from_user.id}"""
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ: {e}")
    else:
        default_ai = user["default_ai"]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer("""<b>NeuronAgent</b>ü§ñ - <i>2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</i>
<b>ChatGPT –∏–ª–∏ Midjourney?</b>""", reply_markup=user_kb.get_menu(default_ai))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
    # if code is not None:
    #     await check_promocode(message.from_user.id, code, message.bot)


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="settings")
async def settings(call: CallbackQuery):
    if not await check_access_or_prompt(call):
        return
    user = await db.get_user(call.from_user.id)
    user_lang = user["chat_gpt_lang"]

    await call.message.answer("""–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 
ChatGPT‚§µÔ∏è""", reply_markup=user_kb.settings(user_lang, 'acc'))
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
from aiogram.types import CallbackQuery, ChatMember
from config import channel_id
from aiogram.utils.exceptions import ChatNotFound
from keyboards.user import partner  # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è¬ª

@dp.callback_query_handler(text="check_sub")
async def check_sub(call: CallbackQuery):
    user_id = call.from_user.id

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ Telegram API
        status: ChatMember = await bot.get_chat_member(channel_id, user_id)
        if status.status == "left":
            await call.message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª‚§µÔ∏è",
                                      reply_markup=partner)
            await call.answer()
            return  # –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    except ChatNotFound:
        await call.message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await call.answer()
        return
    except Exception:
        await call.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await call.answer()
        return

    # –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ–º –¥–∞–ª—å—à–µ
    user = await db.get_user(user_id)
    if user is None:
        await db.add_user(user_id, call.from_user.username, call.from_user.first_name, 0)
        user = await db.get_user(user_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å is_subscribed)
    await db.update_is_subscribed(user_id, True)

    await call.message.answer(
        "<b>NeuronAgent</b>ü§ñ - <i>2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!</i>\n\n"
        "<b>ChatGPT –∏–ª–∏ Midjourney?</b>",
        reply_markup=user_kb.get_menu(user['default_ai'])
    )
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="delete_msg")
async def delete_msg(call: CallbackQuery, state: FSMContext):
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(text="back_to_menu")
async def back_to_menu(call: CallbackQuery):
    user = await db.get_user(call.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer("""NeuronAgentü§ñ - 2 –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!

ChatGPT –∏–ª–∏ Midjourney?""", reply_markup=user_kb.get_menu(user["default_ai"]))  # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ AI
    await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message_handler(state="*", text="ü§ù–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
@dp.message_handler(commands='partner')
async def ref_menu(message: Message):
    ref_data = await db.get_ref_stat(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
    if ref_data['all_income'] is None:
        all_income = 0
    else:
        all_income = ref_data['all_income']

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
    await message.answer_photo(more_api.get_qr_photo(bot_url + '?start=' + str(message.from_user.id)),
                               caption=f'''<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>

<i>–ü—Ä–∏–≤–æ–¥–∏ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π 15% —Å –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π, –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ!</i>

<b>‚¨áÔ∏è –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>
‚îî {bot_url}?start=r{message.from_user.id}

<b>üèÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚îú –õ–∏—á–Ω–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{ref_data["count_refs"]}</b>
‚îú –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç: <b>{ref_data["orders_count"]}</b>
‚îú –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{all_income}</b> —Ä—É–±–ª–µ–π
‚îî –î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: <b>{ref_data["available_for_withdrawal"]}</b> —Ä—É–±–ª–µ–π

–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: ''',
                               reply_markup=user_kb.get_ref_menu(f'{bot_url}?start=r{message.from_user.id}'))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–∫–∫–∞—É–Ω—Ç–∞)
@dp.message_handler(state="*", text="‚öô–ê–∫–∫–∞—É–Ω—Ç")
@dp.message_handler(state="*", commands="account")
async def show_profile(message: Message, state: FSMContext):
    if not await check_access_or_prompt(message):
        return
    await state.finish()
    user_id = message.from_user.id
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lang = user['chat_gpt_lang']

    mj = int(user['mj']) + int(user['free_image']) if int(user['mj']) + int(user['free_image']) >= 0 else 0
    gpt_4o = int(user['tokens_4o']) if int(user['tokens_4o']) >= 0 else 0
    gpt_o4_mini = int(user['tokens_o4_mini']) if int(user['tokens_o4_mini']) >= 0 else 0
    gpt_4_1 = int(user['tokens_4_1']) if int(user['tokens_4_1']) >= 0 else 0
    gpt_o1 = int(user['tokens_o1']) if int(user['tokens_o1']) >= 0 else 0

    logger.info(
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {user_id}:mj: {mj}, gpt_4.1: {gpt_4_1}, gpt_4o: {gpt_4o}, gpt_o4_mini: {gpt_o4_mini}, gpt_o1: {gpt_o1}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
    sub_text = f"""
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ‚§µÔ∏è

–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®Midjourney:  {format(mj, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-4o:  ‚ôæÔ∏è
–¢–æ–∫–µ–Ω—ã üí¨GPT-o4-mini:  ‚ôæÔ∏è
–¢–æ–∫–µ–Ω—ã üí¨GPT-4.1:  {format(gpt_4_1, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-o1:  {format(gpt_o1, ',').replace(',', ' ')}
        """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    await message.answer(f"""üÜî: <code>{user_id}</code>
{sub_text}""", reply_markup=user_kb.get_account(user_lang, "account"))


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="back_to_profile"), state="*")
async def back_to_profile(call: CallbackQuery, state: FSMContext):
    logger.info(f"Back To Profile {call.data}")

    src = call.data.split(":")[1]
    user_id = call.from_user.id
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if src == "acc":
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await call.message.delete()

        await state.finish()
        user_lang = user['chat_gpt_lang']

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
        mj = int(user['mj']) + int(user['free_image']) if int(user['mj']) + int(user['free_image']) >= 0 else 0
        gpt_4o = int(user['tokens_4o']) if int(user['tokens_4o']) >= 0 else 0
        gpt_o4_mini = int(user['tokens_o4_mini']) if int(user['tokens_o4_mini']) >= 0 else 0
        gpt_4_1 = int(user['tokens_4_1']) if int(user['tokens_4_1']) >= 0 else 0
        gpt_o1 = int(user['tokens_o1']) if int(user['tokens_o1']) >= 0 else 0

        logger.info(
            f"–ö–æ–ª–∏–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è {user_id}:mj: {mj}, gpt_4.1: {gpt_4_1}, gpt_4o: {gpt_4o}, gpt_o4_mini: {gpt_o4_mini}, gpt_o1: {gpt_o1}")

        keyboard = user_kb.get_account(user_lang, "account")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
        sub_text = f"""
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ‚§µÔ∏è

–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ üé®Midjourney:  {format(mj, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-4o:  ‚ôæÔ∏è
–¢–æ–∫–µ–Ω—ã üí¨GPT-o4-mini:  ‚ôæÔ∏è
–¢–æ–∫–µ–Ω—ã üí¨GPT-4.1:  {format(gpt_4_1, ',').replace(',', ' ')}
–¢–æ–∫–µ–Ω—ã üí¨GPT-o1:  {format(gpt_o1, ',').replace(',', ' ')}
            """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        await call.message.answer(f"""üÜî: <code>{user_id}</code>
    {sub_text}""", reply_markup=keyboard)

    else:
        await state.finish()

        if src == "not_gpt":
            await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è —Ç–æ–∫–µ–Ω—ã –¥–ª—è üí¨ChatGPT
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
            """, reply_markup=user_kb.get_chatgpt_tokens_menu('disount', user["gpt_model"]))

        if src == "not_mj":
            await call.message.edit_text("""
–£ –≤–∞—Å –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è üé®Midjourney
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ <b>–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É</b>!

–£—Å–ø–µ–π—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å—ã —Å–æ —Å–∫–∏–¥–∫–æ–π, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ <b>24 —á–∞—Å–∞</b>‚§µÔ∏è
            """, reply_markup=user_kb.get_midjourney_discount_notification())

    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞ —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="change_lang:"))
async def change_lang(call: CallbackQuery):
    curr_lang = call.data.split(":")[1]  # –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
    from_msg = call.data.split(":")[2]  # –ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Ç–∫—É–¥–∞ –±—ã–ª –≤—ã–∑–≤–∞–Ω callback)
    new_lang = "en" if curr_lang == "ru" else "ru"  # –°–º–µ–Ω–∞ —è–∑—ã–∫–∞
    await db.change_chat_gpt_lang(call.from_user.id, new_lang)  # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –≤ –±–∞–∑–µ
    lang_text = {"ru": "—Ä—É—Å—Å–∫–∏–π", "en": "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"}
    await call.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_text[new_lang]}")
    if from_msg == "acc":
        kb = user_kb.settings(new_lang, from_msg)  # –ú–µ–Ω—é ChatGPT
    else:
        kb = user_kb.get_account(new_lang, from_msg)  # –ú–µ–Ω—é –∞–∫–∫–∞—É–Ω—Ç–∞
    await call.message.edit_reply_markup(reply_markup=kb)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç OpenAI
@dp.message_handler(state="*", text="üé®Image OpenAI‚úÖ")
@dp.message_handler(state="*", text="üé®Image OpenAI")
@dp.message_handler(state="*", commands="image_openai")
async def image_openai_menu_handler(message: Message, state: FSMContext):
    if not await check_access_or_prompt(message):
        return
    if state:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "image_openai")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChatGPT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI
    user_id = message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç OpenAI")
    await gen_image_openai(message)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è ChatGPT
@dp.message_handler(state="*", text="üí¨ChatGPT‚úÖ")
@dp.message_handler(state="*", text="üí¨ChatGPT")
@dp.message_handler(state="*", commands="chatgpt")
async def ask_question(message: Message, state: FSMContext):
    if not await check_access_or_prompt(message):
        return
    if state:
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "chatgpt")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ChatGPT –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI

    user_id = message.from_user.id
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    model = (user["gpt_model"]).replace("-", "_")
    if model == "4o_mini":
        model = "4o"
        await db.set_model(user_id, model)
    logger.info(f'–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å {model}')

    if model == "4_1" and user["tokens_4_1"] <= 0:
        logger.info(f"–ú–æ–¥–µ–ª—å {model} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º")

        await message.answer("‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 4o")
        if model == "4_1":
            model = model.replace("_", ".")
        await message.answer(f'''
                ‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –¥–ª—è GPT-{model} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! 

    –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è''',
                             reply_markup=user_kb.get_chatgpt_tokens_menu('normal', model)
                             )
        model = "4o"
        await db.set_model(user_id, model)


    if model == "o1" and user["tokens_o1"] <= 0:
        logger.info(f"–ú–æ–¥–µ–ª—å {model} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º")

        await message.answer("‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 4o")
        await message.answer(f'''
                ‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –¥–ª—è GPT-{model} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! 

    –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è''',
                             reply_markup=user_kb.get_chatgpt_tokens_menu('normal', model)
                             )
        model = "4o"
        await db.set_model(user_id, model)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user[f"tokens_{model}"] <= 0:
        return await not_enough_balance(message.bot, user_id, "chatgpt")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    current_chat = await db.get_chat_by_id(user["current_chat_id"])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if current_chat and current_chat["name"]:
        keyboard = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("üóÇ–ú–æ–∏ —á–∞—Ç—ã", callback_data="my_chats"),
            InlineKeyboardButton("‚ûï–ù–æ–≤—ã–π —á–∞—Ç", callback_data="create_new_chat"),
        )
        await message.answer(
            f"üí¨ –ê–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç: *{current_chat['name']}*\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å‚§µÔ∏è",
            parse_mode="Markdown",
            reply_markup=keyboard
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
        example_prompt = await generate_example_prompt()
        await message.answer(
            f"""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>
–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{example_prompt}</code>
        
<u><a href="https://telegra.ph/Kak-polzovatsya-ChatGPT-podrobnaya-instrukciya-06-04">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
            reply_markup=user_kb.get_menu("chatgpt"),
            disable_web_page_preview=True
        )


@dp.callback_query_handler(text="create_new_chat", state="*")
async def handle_create_new_chat(call: CallbackQuery, state: FSMContext):
    await state.finish()
    user_id = call.from_user.id

    # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    await db.set_current_chat(user_id, None)

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    example_prompt = await generate_example_prompt()
    await call.message.edit_text(
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞‚§µÔ∏è</b>\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>{example_prompt}</code>",
        parse_mode="HTML"
    )



# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
@dp.message_handler(state="*", text="üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
@dp.message_handler(state="*", commands="help")
async def support(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer('–û—Ç–≤–µ—Ç—ã –Ω–∞ –º–Ω–æ–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º <a href="https://t.me/NeuronAgent">–∫–∞–Ω–∞–ª–µ</a>.',
                         disable_web_page_preview=True, reply_markup=user_kb.about)  # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è MidJourney
@dp.message_handler(state="*", text="üé®Midjourney‚úÖ")
@dp.message_handler(state="*", text="üé®Midjourney")
@dp.message_handler(state="*", commands="midjourney")
async def gen_img(message: Message, state: FSMContext):
    if not await check_access_or_prompt(message):
        return
    user_id = message.from_user.id
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await db.change_default_ai(message.from_user.id, "image")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MidJourney –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π AI
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(message.bot, message.from_user.id, "image")  # –°–æ–æ–±—â–∞–µ–º –æ–± –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
        return

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤–≤–æ–¥–∞
    await message.answer("""<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b>
<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>–ó–∞–º–µ—Ä–∑—à–µ–µ –±–∏—Ä—é–∑–æ–≤–æ–µ –æ–∑–µ—Ä–æ –≤–æ–∫—Ä—É–≥ –∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                         reply_markup=user_kb.get_menu("image"),
                         disable_web_page_preview=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —á–µ—Ä–µ–∑ callback-–∑–∞–ø—Ä–æ—Å
@dp.callback_query_handler(Text(startswith="select_amount"))
async def select_amount(call: CallbackQuery):
    amount = int(call.data.split(":")[1])  # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    urls = {
        "tinkoff": pay.get_pay_url_tinkoff(call.from_user.id, amount),
        "freekassa": pay.get_pay_url_freekassa(call.from_user.id, amount),
        "payok": pay.get_pay_url_payok(call.from_user.id, amount),
    }
    await call.message.answer(f"""üí∞ –°—É–º–º–∞: <b>{amount} —Ä—É–±–ª–µ–π

‚ôªÔ∏è –°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</b>""", reply_markup=user_kb.get_pay_urls(urls))  # –ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@dp.message_handler(state="*", text="–û—Ç–º–µ–Ω–∞")
async def cancel(message: Message, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user = await db.get_user(message.from_user.id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer("–í–≤–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=user_kb.get_menu(user["default_ai"]))  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="choose_image:"))
async def choose_image(call: CallbackQuery):
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user = await db.get_user(call.from_user.id)

    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(call.bot, call.from_user.id, "image")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è MidJourney
        return
    action_id = call.data.split(":")[1]
    image_id = call.data.split(":")[2]
    task_id = (await db.get_task_by_action_id(int(action_id)))["external_task_id"]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –æ—Ç–ª–∏—á–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ‚Ä¶‚è≥",
                              reply_markup=user_kb.get_menu(user["default_ai"]))
    res = await ai.get_choose_mdjrny(task_id, image_id, call.from_user.id)  # –ó–∞–ø—Ä–æ—Å –∫ MidJourney API

    if res is not None and "success" not in res:
        if "message" in res and res["message"] == "repeat task":
            return await call.message.answer(
                "–í—ã —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")  # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="change_image:"))
async def change_image(call: CallbackQuery):
    await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    user_id = call.from_user.id
    user_notified = await db.get_user_notified_mj(user_id)

    user = await db.get_user(user_id)
    if user["mj"] <= 0 and user["free_image"] <= 0:
        await not_enough_balance(call.bot, user_id, "image")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        return
    action = call.data.split(":")[3]
    button_type = call.data.split(":")[1]
    value = call.data.split(":")[2]
    task_id = (await db.get_task_by_action_id(int(action)))["external_task_id"]
    await call.message.answer("–û–∂–∏–¥–∞–π—Ç–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚è≥",
                              reply_markup=user_kb.get_menu(user["default_ai"]))

    action_id = await db.add_action(user_id, "image", button_type)

    if 1 < user["mj"] <= 3:  # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å 3 –∏–ª–∏ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—Å–æ–≤
        now = datetime.now()

        if user_notified is None:
            await db.create_user_notification_mj(user_id)
            await notify_low_midjourney_requests(user_id,
                                                 call.bot)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–∫–µ–Ω–æ–≤
            # await db.set_user_notified(user_id)  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        else:
            last_notification = user_notified['last_notification']
            if last_notification is None or now > last_notification + timedelta(days=30):
                await db.update_user_notification_mj(user_id)
                await notify_low_midjourney_requests(user_id, call.bot)

    if button_type == "zoom":
        response = await mj_api.outpaint(task_id, value, action_id)  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
    elif button_type == "vary":
        response = await mj_api.variation(task_id, value, action_id)  # –í–∞—Ä–∏–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="clear_content")
async def clear_content(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await call.message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω",
                              reply_markup=user_kb.get_menu(user["default_ai"]))  # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞
    try:
        await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    except:
        pass


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(Text(startswith="try_prompt"))
async def try_prompt(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if "prompt" not in data:
        await call.message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å")
        return await call.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await state.finish()
    await call.answer()

    user = await db.get_user(call.from_user.id)
    if user["default_ai"] == "image":
        await get_mj(data['prompt'], call.from_user.id, call.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT: –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ callback
@dp.callback_query_handler(text="chatgpt_about_me", state="*")
async def chatgpt_about_me(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å ChatGPT –ª—é–±–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.clear_description())
    await state.set_state(states.ChangeChatGPTAboutMe.text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTAboutMe.text)
async def change_profile_info(message: Message, state: FSMContext):
    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_about_me(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer("‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –•—ç–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–π ChatGPT
@dp.callback_query_handler(text="character_menu", state="*")
async def character_menu(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ChatGPT –∫–∞–∫ –í–∞–º —É–¥–æ–±–Ω–æ - —Ç–æ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–π‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.clear_description())
    await state.set_state(states.ChangeChatGPTCharacter.text)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTCharacter.text)
async def change_character(message: Message, state: FSMContext):
    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_character(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
    await message.answer("‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="reset_chatgpt_settings", state="*")
async def reset_chatgpt_settings(call: CallbackQuery, state: FSMContext):
    await db.update_chatgpt_character(call.from_user.id, "")
    await db.update_chatgpt_about_me(call.from_user.id, "")  # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
    await call.answer("–û–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.callback_query_handler(text="chatgpt_settings", state="*")
async def chatgpt_setting(call: CallbackQuery, state: FSMContext):
    user = await db.get_user(call.from_user.id)
    await call.message.answer(
        '<b>–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å</b>\n\n–ù–∞—Å—Ç—Ä–æ–π—Ç–µ ChatGPT –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ - —Ç–æ–Ω, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å —Å–æ–æ–±—â–µ–Ω–∏–π ‚§µÔ∏è\n\n<u><a href="https://telegra.ph/Tonkaya-nastrojka-ChatGPT-06-30">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>',
        disable_web_page_preview=True,
        reply_markup=user_kb.get_menu(user["default_ai"]))
    await state.set_state(states.ChangeChatGPTSettings.text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await call.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT
@dp.message_handler(state=states.ChangeChatGPTSettings.text)
async def change_profile_settings(message: Message, state: FSMContext):
    if len(message.text) > 256:
        return await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 256 —Å–∏–º–≤–æ–ª–æ–≤")
    await db.update_chatgpt_settings(message.from_user.id, message.text)  # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑–µ
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.finish()


# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
@dp.message_handler()
async def gen_prompt(message: Message, state: FSMContext):
    if not await check_access_or_prompt(message):
        return
    await state.update_data(prompt=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    if user is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞")
        # return await message.bot.send_message(ADMINS_CODER, user_id)
    if user["default_ai"] == "chatgpt":
        model = (user["gpt_model"]).replace("-", "_")

        logger.info(f'–¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ GPT. User: {user}, Model: {model}, tokens: {user[f"tokens_{model}"]}')
        if model == "4_1" and user["tokens_4_1"] <= 0:
            logger.info(f"–ú–æ–¥–µ–ª—å {model} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º")

            await message.answer("‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 4o")
            if model == "4_1":
                model = model.replace("_", ".")
            await message.answer(f'''
                    ‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –¥–ª—è GPT-{model} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! 

        –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è''',
                                 reply_markup=user_kb.get_chatgpt_tokens_menu('normal', model)
                                 )
            model = "4o"
            await db.set_model(user_id, model)

        if model == "o1" and user["tokens_o1"] <= 0:
            logger.info(f"–ú–æ–¥–µ–ª—å {model} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º")

            await message.answer("‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ 4o")
            await message.answer(f'''
                    ‚ö†Ô∏è–¢–æ–∫–µ–Ω—ã –¥–ª—è GPT-{model} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! 

        –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–∞—Ä–∏–∞–Ω—Ç‚§µÔ∏è''',
                                 reply_markup=user_kb.get_chatgpt_tokens_menu('normal', model)
                                 )
            model = "4o"
            await db.set_model(user_id, model)

        if user[f"tokens_{model}"] <= 0:
            return await not_enough_balance(message.bot, user_id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_character"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt=message.text, messages=messages, user_id=user_id,
                                        bot=message.bot, state=state)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
        await state.update_data(messages=update_messages)

    elif user["default_ai"] == "image":
        await get_mj(message.text, user_id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney
    elif user["default_ai"] == "image_openai":
        await gen_image_openai(message)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
@dp.message_handler(content_types=['voice'])
async def handle_voice(message: Message, state: FSMContext):
    file_info = await message.bot.get_file(message.voice.file_id)
    file_path = file_info.file_path
    file = await message.bot.download_file(file_path)

    with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as temp_ogg_file:
        temp_ogg_file.write(file.getbuffer())
        temp_ogg_path = temp_ogg_file.nameF

    text = voice_to_text(temp_ogg_path)
    os.remove(temp_ogg_path)
    await state.update_data(prompt=text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user = await db.get_user(message.from_user.id)

    if user is None:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞")

    if user["default_ai"] == "chatgpt":
        model = (user["gpt_model"]).replace("-", "_")

        if user[f"tokens_{model}"] <= 0:
            return await not_enough_balance(message.bot, message.from_user.id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_settings"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt=text, messages=messages, user_id=message.from_user.id,
                                        bot=message.bot, state=state)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
        await state.update_data(messages=update_messages)

    elif user["default_ai"] == "image":
        await get_mj(text, message.from_user.id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney\
    elif user["default_ai"] == "image_openai":
        await gen_image_openai(message)


# –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ –ê—É–¥–∏–æ
@dp.callback_query_handler(text="text_to_audio")
async def return_voice(call: CallbackQuery, state: FSMContext):
    if not await check_access_or_prompt(call):
        return
    processing_message = await call.message.answer("‚è≥–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –æ–∂–∏–¥–∞–π—Ç–µ")
    user_id = call.from_user.id

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ–ª–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_voice = await db.get_voice(user_id)
        if not user_voice:  # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π
            raise ValueError("User voice not found")
    except (ValueError, Exception):  # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
        user_voice = await db.create_voice(user_id)  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    content_raw = await state.get_data()

    content = content_raw.get("content")
    if not content:
        await call.message.answer("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è.")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    audio_response = text_to_speech(content, voice=user_voice)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "‚è≥–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ, –æ–∂–∏–¥–∞–π—Ç–µ"
    await processing_message.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.answer_voice(voice=audio_response)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        await call.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ callback —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@dp.message_handler(is_media_group=False, content_types="photo")
async def photo_imagine(message: Message, state: FSMContext):
    user_id = message.from_user.id

    if message.caption is None:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        return
    file = await message.photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url = await more_api.upload_photo_to_host(photo_url)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ –≤–Ω–µ—à–Ω–∏–π —Ö–æ—Å—Ç–∏–Ω–≥
    if ds_photo_url == "error":
        await message.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å —Ñ–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ")
        await message.bot.send_message(bug_id, "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–º–µ–Ω–∏—Ç—å API-–∫–ª—é—á —Ñ–æ—Ç–æ—Ö–æ—Å—Ç–∏–Ω–≥–∞")
        return
    prompt = ds_photo_url + " " + message.caption  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    await state.update_data(prompt=prompt)

    user = await db.get_user(user_id)

    if user["default_ai"] == "chatgpt":
        model = (user["gpt_model"]).replace('-', '_')

        if user[f"tokens_{model}"] <= 0:
            return await not_enough_balance(message.bot, message.from_user.id, "chatgpt")

        data = await state.get_data()
        system_msg = user["chatgpt_about_me"] + "\n" + user["chatgpt_settings"]
        messages = [{"role": "system", "content": system_msg}] if "messages" not in data else data["messages"]
        update_messages = await get_gpt(prompt, messages=messages, user_id=message.from_user.id,
                                        bot=message.bot, state=state)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ChatGPT
        await state.update_data(messages=update_messages)

    elif user["default_ai"] == "image":
        await get_mj(prompt, message.from_user.id, message.bot)
    elif user["default_ai"] == "image_openai":
        await gen_image_openai(message)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤ (–≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ–æ—Ç–æ)
@dp.message_handler(is_media_group=True, content_types=ContentType.ANY)
async def handle_albums(message: Message, album: List[Message], state: FSMContext):
    if len(album) != 2 or not (album[0].photo and album[1].photo):
        return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–≤–∞ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –∏—Ö —Å–∫–ª–µ–∏—Ç—å")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ
    file = await album[0].photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url1 = await more_api.upload_photo_to_host(photo_url)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ
    file = await album[1].photo[-1].get_file()
    photo_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"
    ds_photo_url2 = await more_api.upload_photo_to_host(photo_url)

    prompt = f"{ds_photo_url1} {ds_photo_url2}"  # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–≤—É—Ö —Ñ–æ—Ç–æ
    await state.update_data(prompt=prompt)
    await get_mj(prompt, message.from_user.id, message.bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ MidJourney


# –í—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ GPT
@dp.callback_query_handler(text="model_menu")
async def model_menu(call: CallbackQuery):
    user_id = call.from_user.id
    user_model = await db.get_model(user_id)

    logger.info(f"User ID: {user_id}, —Ç–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {user_model}")

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –º–æ–¥–µ–ª—å—é
    keyboard = user_kb.model_keyboard(selected_model=user_model)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤‚§µÔ∏è:", reply_markup=keyboard)
    await call.answer()


# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT
@dp.callback_query_handler(text_contains="select_model")
async def select_model(call: CallbackQuery):
    user_id = call.from_user.id
    selected_model = call.data.split(":")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    logger.info(f"User ID: {user_id}, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {selected_model}")
    selected_model_bd = selected_model
    if selected_model == "4.1":
        selected_model_bd = "4_1"
    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_model(user_id, selected_model_bd)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é
        keyboard = user_kb.model_keyboard(selected_model=selected_model)

        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å GPT –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤‚§µÔ∏è:", reply_markup=keyboard)

        await call.message.answer(f"‚úÖ–ú–æ–¥–µ–ª—å –¥–ª—è ChatGPT –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ GPT-{selected_model}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏ GPT: {e}")
        await call.answer()


# –í—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞
@dp.callback_query_handler(text="voice_menu")
async def voice_menu(call: CallbackQuery):
    user_id = call.from_user.id
    user_voice = await db.get_voice(user_id)

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
    keyboard = user_kb.voice_keyboard(selected_voice=user_voice)

    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å –¥–ª—è ChatGPT‚§µÔ∏è:", reply_markup=keyboard)
    await call.answer()


# –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞
@dp.callback_query_handler(text_contains="select_voice")
async def select_voice(call: CallbackQuery):
    user_id = call.from_user.id
    selected_voice = call.data.split(":")[1]  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö

    try:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_voice(user_id, selected_voice)

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
        updated_keyboard = user_kb.voice_keyboard(selected_voice=selected_voice)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await call.message.edit_reply_markup(reply_markup=updated_keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—ã–±–æ—Ä–µ
        await call.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {selected_voice} ‚úÖ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥–æ–ª–æ—Å–∞: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤
@dp.callback_query_handler(text="check_voice")
async def check_voice(call: CallbackQuery):
    user_id = call.from_user.id
    user_lang = await db.get_chat_gpt_lang(user_id)

    # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
    if user_lang == "ru":
        voices_path = "voices_ru"
    elif user_lang == "en":
        voices_path = "voices_en"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(voices_path):
        await call.message.answer("‚ö†Ô∏è –ü–∞–ø–∫–∞ —Å –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ .mp3
    voice_files = [f for f in os.listdir(voices_path) if f.endswith(".mp3")]

    # –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not voice_files:
        await call.message.answer("‚ö†Ô∏è –í –ø–∞–ø–∫–µ 'voices' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
        return

    # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
    media_group = MediaGroup()
    for voice_file in voice_files:
        file_path = os.path.join(voices_path, voice_file)
        audio = InputFile(file_path)
        media_group.attach_audio(audio)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await call.message.answer(f"–û—Ç–≤–µ—Ç—ã ChatGPT:{'RUS' if user_lang == 'ru' else 'ENG'}")
    await call.message.answer_media_group(media_group)
    await call.answer()


@dp.callback_query_handler(text="my_chats")
async def show_my_chats(call: CallbackQuery, page: int = 0):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "my_chats", –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞–º–∏.

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞.
    :param page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–∞—Ç–æ–≤.
    """
    if not await check_access_or_prompt(call):
        return
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    chats_per_page = 4  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    offset = page * chats_per_page

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    conn = await db.get_conn()
    chats = await conn.fetch(
        "SELECT id, name FROM chats WHERE user_id = $1 ORDER BY created_at LIMIT $2 OFFSET $3",
        user["user_id"], chats_per_page, offset
    )
    await conn.close()

    current_chat_id = user["current_chat_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = (
        "üóÇ *–ú–µ–Ω—é —á–∞—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç:*\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞—Ç—ã\n"
        "- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏\n"
        "- –ò–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —á–∞—Ç ‚§µÔ∏è*"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    kb.add(
        InlineKeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="delete_all_chats"),
        InlineKeyboardButton("‚ûï–ù–æ–≤—ã–π —á–∞—Ç", callback_data="create_chat")
    )

    # –ö–Ω–æ–ø–∫–∏ —á–∞—Ç–æ–≤
    for chat in chats:
        chat_name = chat["name"]
        chat_id = chat["id"]
        # –û—Ç–º–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if chat_id == current_chat_id:
            chat_button_text = f"‚úÖ {chat_name}"
        else:
            chat_button_text = chat_name
        kb.add(InlineKeyboardButton(chat_button_text, callback_data=f"select_chat:{chat_id}"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    kb.row(
        InlineKeyboardButton("‚èÆ", callback_data=f"page:first:{page}"),
        InlineKeyboardButton("‚óÄ", callback_data=f"page:prev:{page}"),
        InlineKeyboardButton("‚ñ∂", callback_data=f"page:next:{page}"),
        InlineKeyboardButton("‚è≠", callback_data=f"page:last:{page}")
    )

    # –ù–∞–∑–∞–¥
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∏–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.answer(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('page:'))
async def paginate_chats(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —á–∞—Ç–æ–≤. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
    —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (–ø–µ—Ä–≤–∞—è, –ø—Ä–µ–¥—ã–¥—É—â–∞—è, —Å–ª–µ–¥—É—é—â–∞—è, –ø–æ—Å–ª–µ–¥–Ω—è—è).

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    page_data = call.data.split(":")
    action = page_data[1]  # first, prev, next, last
    current_page = int(page_data[2])  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = call.from_user.id
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = await db.get_conn()
    total_chats = await conn.fetchval(
        "SELECT COUNT(*) FROM chats WHERE user_id = $1", user_id
    )
    await conn.close()

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    chats_per_page = 4
    total_pages = (total_chats // chats_per_page) + (1 if total_chats % chats_per_page > 0 else 0) - 1

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if action == 'first':
        new_page = 0
    elif action == 'prev' and current_page > 0:
        new_page = current_page - 1
    elif action == 'next' and current_page < total_pages:
        new_page = current_page + 1
    elif action == 'last':
        new_page = total_pages
    else:
        new_page = current_page  # –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–π

    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    offset = new_page * chats_per_page
    conn = await db.get_conn()
    chats = await conn.fetch(
        "SELECT id, name FROM chats WHERE user_id = $1 ORDER BY created_at LIMIT $2 OFFSET $3",
        user_id, chats_per_page, offset
    )
    await conn.close()

    current_chat_id = user["current_chat_id"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
    text = (
        "üóÇ *–ú–µ–Ω—é —á–∞—Ç–æ–≤ –ø–æ–∑–≤–æ–ª—è–µ—Ç:*\n"
        "- –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —á–∞—Ç—ã\n"
        "- –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏\n"
        "- –ò–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–æ–≤\n\n"
        "*–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —á–∞—Ç ‚§µÔ∏è*"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    kb = InlineKeyboardMarkup(row_width=2)

    # –ö–Ω–æ–ø–∫–∏: —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
    kb.add(
        InlineKeyboardButton("‚ùå–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="delete_all_chats"),
        InlineKeyboardButton("‚ûï–ù–æ–≤—ã–π —á–∞—Ç", callback_data="create_chat")
    )

    # –ö–Ω–æ–ø–∫–∏ —á–∞—Ç–æ–≤
    for chat in chats:
        chat_name = chat["name"]
        chat_id = chat["id"]
        if chat_id == current_chat_id:
            chat_button_text = f"‚úÖ {chat_name}"
        else:
            chat_button_text = chat_name
        kb.add(InlineKeyboardButton(chat_button_text, callback_data=f"select_chat:{chat_id}"))

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    kb.row(
        InlineKeyboardButton("‚èÆ", callback_data=f"page:first:{new_page}"),
        InlineKeyboardButton("‚óÄ", callback_data=f"page:prev:{new_page}"),
        InlineKeyboardButton("‚ñ∂", callback_data=f"page:next:{new_page}"),
        InlineKeyboardButton("‚è≠", callback_data=f"page:last:{new_page}")
    )

    # –ù–∞–∑–∞–¥
    kb.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∞—Ç–∏–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    try:
        await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    except Exception as e:
        pass

    # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('select_chat:'))
async def select_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞. –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–∞.

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞.
    """
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    chat_id = int(call.data.split(":")[1])
    user_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —á–∞—Ç–µ
    chat = await db.get_chat_by_id(chat_id)
    chat_name = chat["name"]

    # –¢–µ–∫—Å—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    text = f'–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–æ–º\n"*{chat_name}*"'

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º
    select_button_text = "‚úÖ –í—ã–±—Ä–∞–Ω" if chat_id == user["current_chat_id"] else "‚ñ∂Ô∏è –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ—Ç —á–∞—Ç"
    kb = InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(select_button_text, callback_data=f"select_active_chat:{chat_id}"),
        InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —á–∞—Ç", callback_data=f"rename_chat:{chat_id}"),
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data=f"delete_selected_chat:{chat_id}"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_chats")
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await call.message.edit_text(text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('select_active_chat:'))
async def select_active_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "UPDATE users SET current_chat_id = $1 WHERE user_id = $2", chat_id, user["user_id"]
    )
    await conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —á–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
    await call.message.edit_text("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data.startswith('rename_chat:'))
async def rename_chat(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å ID —á–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è,
    –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    await state.update_data(chat_id=chat_id)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —á–∞—Ç–∞:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞
    await EnterChatRename.chat_name.set()


@dp.callback_query_handler(lambda c: c.data.startswith('delete_selected_chat:'))
async def delete_selected_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å ID —á–∞—Ç–∞ —É–¥–∞–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute("DELETE FROM chats WHERE id = $1", chat_id)
    await conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await call.message.edit_text("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞


@dp.callback_query_handler(lambda c: c.data.startswith('select_chat:'))
async def select_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤.
    """
    chat_id = int(call.data.split(":")[1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "UPDATE users SET current_chat_id = $1 WHERE user_id = $2", chat_id, user["user_id"]
    )
    await conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    await show_my_chats(call)


@dp.callback_query_handler(text="delete_all_chats")
async def confirm_delete_all_chats(call: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
    –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á–∞—Ç—ã –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    confirmation_text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã?"
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã", callback_data="confirm_delete_all_chats"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_chats")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await call.message.edit_text(confirmation_text, reply_markup=kb)
    await call.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞


@dp.callback_query_handler(text="confirm_delete_all_chats")
async def delete_all_chats(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, —É–¥–∞–ª—è–µ—Ç –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute("DELETE FROM chats WHERE user_id = $1", user_id)
    await conn.close()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    await show_my_chats(call)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
    await call.message.edit_text("–í—Å–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()


@dp.callback_query_handler(text="create_chat")
async def create_chat(call: CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç —á–∞—Ç–æ–≤,
    –∑–∞—Ç–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
    """
    if not await check_access_or_prompt(call):
        return
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    conn = await db.get_conn()
    chat_count = await conn.fetchval("SELECT COUNT(*) FROM chats WHERE user_id = $1", user_id)
    await conn.close()

    if chat_count >= 10:
        await call.answer("–í—ã —É–∂–µ —Å–æ–∑–¥–∞–ª–∏ –º–∞–∫—Å–∏–º—É–º 10 —á–∞—Ç–æ–≤. –£–¥–∞–ª–∏—Ç–µ –æ–¥–∏–Ω, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.", show_alert=True)
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    await EnterChatName.chat_name.set()



@dp.message_handler(state=EnterChatName.chat_name)
async def process_new_chat_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É, –∑–∞—Ç–µ–º —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö,
    –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_name = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

    if not chat_name:
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "INSERT INTO chats (user_id, name, created_at, updated_at) VALUES ($1, $2, NOW(), NOW())",
        user_id, chat_name
    )
    await conn.close()

    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    conn = await db.get_conn()
    new_chat_id = await conn.fetchval(
        "SELECT id FROM chats WHERE user_id = $1 AND name = $2 LIMIT 1", user_id, chat_name
    )
    await conn.close()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    await db.set_current_chat(user_id, new_chat_id)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
    await message.answer(f'–ß–∞—Ç "_{chat_name}_" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*', parse_mode="Markdown")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.message_handler(state=EnterChatRename.chat_name)
async def process_rename_chat_name(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è —á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É, –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–º—è —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
    """
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_name = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —á–∞—Ç–∞

    if not chat_name:
        # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è (chat_id)
    data = await state.get_data()
    chat_id = data["chat_id"]  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —á–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "UPDATE chats SET name = $1, updated_at = NOW() WHERE id = $2 AND user_id = $3",
        chat_name, chat_id, user_id
    )
    await conn.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
    await message.answer(f'–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ "_{chat_name}_".\n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*', parse_mode="Markdown")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()


@dp.callback_query_handler(text="delete_chat")
async def delete_chat(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ, —É–¥–∞–ª—è–µ—Ç —á–∞—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    if not await check_access_or_prompt(call):
        return
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn = await db.get_conn()
    chat = await conn.fetchrow("SELECT name FROM chats WHERE id = $1", user["current_chat_id"])
    await conn.close()

    if not chat:
        # –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await call.message.edit_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
        return

    chat_name = chat["name"]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
    confirmation_text = f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç: "*{chat_name}*?"'
    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("‚úÖ –£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="confirm_delete_chat"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="my_chats")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    await call.message.edit_text(confirmation_text, parse_mode="Markdown", reply_markup=kb)
    await call.answer()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –æ–∫–Ω–∞


@dp.callback_query_handler(text="confirm_delete_chat")
async def confirm_delete_chat(call: CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è, —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏.
    """
    user_id = call.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = await db.get_user(user_id)
    if not user:
        await call.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await db.get_conn()
    await conn.execute(
        "DELETE FROM chats WHERE id = $1", user["current_chat_id"]

    )
    await conn.close()

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    await call.message.edit_text("–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω. \n\n*–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å ‚§µÔ∏è*", parse_mode="Markdown")
    await call.answer()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞: –ø–æ–¥–ø–∏—Å–∞–Ω –∏–ª–∏ –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø
# –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False
async def check_access_or_prompt(message) -> bool:
    if not check_channel:
        return True
    user_id = message.from_user.id
    user = await db.get_user(user_id)
    if not await check_reg(user_id) and user.get("used_trial"):
        await bot.send_message(user_id,
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª‚§µÔ∏è",
            reply_markup=partner
        )
        return False
    return True

async def check_reg(user_id) -> bool:
    status: ChatMember = await bot.get_chat_member(channel_id, user_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω (status == "left"), –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    if status.status == "left":
        return False
    return True



handlers\users_image_openai.py
from io import BytesIO
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from openai import OpenAI
import base64
import tempfile
import os
import json
from config import OPENAPI_TOKEN
from create_bot import dp, bot
from handlers.users import not_enough_balance
from keyboards.user import image_openai_menu, image_settings_menu, size_menu, quality_menu, background_menu, \
    cancel_keyboard

from utils import db
from utils.ai import get_translate
from typing import Literal
import logging

from utils.db import update_image_openai_settings

PERSISTENT_TEMP_DIR = "persistent_temp"
os.makedirs(PERSISTENT_TEMP_DIR, exist_ok=True)

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
# client = OpenAI(api_key=OPENAPI_TOKEN)
from tests.mock_openai import MockOpenAIClient
client = MockOpenAIClient(image_path="photo_test/generated.png")

# FSM –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
class ImageGenerationStates(StatesGroup):
    WAITING_FOR_PROMPT = State()
    WAITING_FOR_IMAGES = State()
    WAITING_FOR_MASK = State()
    WAITING_FOR_PROMPT_MASK = State()
    WAITING_FOR_PROMPT_EDIT_IMAGE = State()
    WAITING_FOR_IMAGE_FIRST = State()

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
ALLOWED_SIZES = {
    "auto",
    "1024x1024", "1536x1024", "1024x1536",
    "256x256", "512x512",
    "1792x1024", "1024x1792"
}

ALLOWED_QUALITY = {
    "standard", "hd", "low", "medium", "high", "auto"
}

ALLOWED_BACKGROUND = {
    "transparent", "opaque", "auto"
}

# –¢–∏–ø—ã –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
SizeType = Literal[
    "auto",
    "1024x1024", "1536x1024", "1024x1536",
    "256x256", "512x512",
    "1792x1024", "1024x1792"
]
QualityType = Literal["standard", "hd", "low", "medium", "high", "auto"]
BackgroundType = Literal["transparent", "opaque", "auto"]


# –°–ª–æ–≤–∞—Ä—å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏ –∫–∞—á–µ—Å—Ç–≤–∞
def calculate_token_cost(size, quality):
    cost_map = {
        ("1024x1024", "low"): 272,
        ("1024x1024", "medium"): 1056,
        ("1024x1024", "high"): 4160,

        ("1536x1024", "low"): 400,
        ("1536x1024", "medium"): 1568,
        ("1536x1024", "high"): 6208,

        ("1024x1536", "low"): 408,
        ("1024x1536", "medium"): 1584,
        ("1024x1536", "high"): 6240,
    }
    return cost_map.get((size, quality), 1056)




# –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
@dp.callback_query_handler(lambda c: c.data == "generate_image_prompt")
async def start_generate_image(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id

    if not await db.has_image_openai_balance(user_id):
        logger.info(f'–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç OpenAI, –ø–µ—Ä–µ–¥–∞–µ–º –º–µ–Ω—é —Å –ø–æ–∫—É–ø–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–π')
        await not_enough_balance(callback_query.bot, user_id, "image_openai")
        return

    await callback_query.message.edit_text("""<b>‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>
<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>–£—é—Ç–Ω—ã–π –¥–æ–º–∏–∫ –Ω–∞ –∫—Ä–∞—é –ø—Ä–æ–ø–∞—Å—Ç–∏, –æ–∫—Ä—É–∂—ë–Ω–Ω—ã–π —Ü–≤–µ—Ç—É—â–∏–º–∏ —Å–∞–¥–∞–º–∏ –∏ –æ–∑—ë—Ä–∞–º–∏ —Å –æ—Ç—Ä–∞–∂–∞—é—â–∏–º—Å—è –Ω–µ–±–æ–º</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                         disable_web_page_preview=True, reply_markup=cancel_keyboard)

    await ImageGenerationStates.WAITING_FOR_PROMPT.set()


def parse_image_settings(settings_str: str) -> dict[str, str]:
    try:
        data = json.loads(settings_str)
    except json.JSONDecodeError:
        data = {}

    size = data.get("size", "1024x1024")
    if size not in ALLOWED_SIZES:
        size = "1024x1024"

    quality = data.get("quality", "medium")
    if quality not in ALLOWED_QUALITY:
        quality = "medium"

    background = data.get("background", "opaque")
    if background not in ALLOWED_BACKGROUND:
        background = "opaque"

    return {
        "size": size,
        "quality": quality,
        "background": background
    }


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞
@dp.message_handler(state=ImageGenerationStates.WAITING_FOR_PROMPT)
async def generate_image_from_prompt(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    prompt = message.text.strip()
    logger.info(f'–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è OpenAI, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, prompt: {prompt} ')
    prompt = await get_translate(prompt)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    if not prompt:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    user = await db.get_user(user_id)

    settings = parse_image_settings(user["image_openai_settings"])
    size: SizeType = settings["size"]
    quality: QualityType = settings["quality"]
    background: BackgroundType = settings["background"]

    try:
        result = client.images.generate(
            model="gpt-image-1",
            prompt=prompt,
            size=size,
            quality=quality,
            background=background
        )

        image_base64 = result.data[0].b64_json
        image_bytes = base64.b64decode(image_base64)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_photo(chat_id=user_id, photo=types.InputFile(BytesIO(image_bytes), filename="generated.png"))

        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.decrease_image_openai_balance(user_id)
        await db.mark_used_trial(user_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.add_action(user_id, "image_openai", "generate")
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt[:50]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        await state.finish()


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == "edit_image")
async def start_edit_image(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id

    if not await db.has_image_openai_balance(user_id):
        await not_enough_balance(callback_query.bot, user_id, "image_openai")
        return

    await callback_query.message.edit_text("""<b>üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.</b>"
<i>–í—ã –º–æ–∂–µ—Ç–µ:
- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–≥–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.</i>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                                           disable_web_page_preview=True, reply_markup=cancel_keyboard)

    await ImageGenerationStates.WAITING_FOR_IMAGES.set()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@dp.message_handler(content_types=['photo'], state=ImageGenerationStates.WAITING_FOR_IMAGES)
async def handle_images_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    images_paths = data.get("images_paths", [])

    if len(images_paths) >= 10:
        await message.answer("‚ö†Ô∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        return

    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    downloaded_file = await bot.download_file(file.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
    image_filename = f"{user_id}_{len(images_paths)}.png"
    image_path = os.path.join(PERSISTENT_TEMP_DIR, image_filename)

    with open(image_path, 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())

    images_paths.append(image_path)
    await state.update_data(images_paths=images_paths)

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É", callback_data="finish_image_upload"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action"),
    )

    if len(images_paths) == 1:
        await message.answer("üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ?", reply_markup=keyboard)
    else:
        await message.answer(f"üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(images_paths)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == "finish_image_upload", state=ImageGenerationStates.WAITING_FOR_IMAGES)
async def finish_image_upload(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("""<b>‚úçÔ∏è–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
–ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –Ω–∏—Ö.</b>

<i>–ù–∞–ø—Ä–∏–º–µ—Ä:</i> <code>–°–æ–∑–¥–∞–π –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</code>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                                           disable_web_page_preview=True, reply_markup=cancel_keyboard)
    await ImageGenerationStates.WAITING_FOR_PROMPT_EDIT_IMAGE.set()



@dp.message_handler(state=ImageGenerationStates.WAITING_FOR_PROMPT_EDIT_IMAGE)
async def handle_edit_prompt(message: types.Message, state: FSMContext):
    prompt = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    images_paths = data.get('images_paths', [])
    mask_path = data.get('mask_path')

    if not images_paths:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    user = await db.get_user(user_id)
    settings = parse_image_settings(user["image_openai_settings"])
    size: SizeType = settings["size"]
    quality: QualityType = settings["quality"]
    background: BackgroundType = settings["background"]

    image_file = None
    image_files = []
    mask_file = None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        for path in images_paths:
            if not os.path.exists(path):
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        if mask_path and not os.path.exists(mask_path):
            raise FileNotFoundError(f"–ú–∞—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {mask_path}")

        if mask_path:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –º–∞—Å–∫–æ–π: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_file = open(images_paths[0], "rb")
            mask_file = open(mask_path, "rb")

            result = client.images.edit(
                model="gpt-image-1",
                image=image_file,
                mask=mask_file,
                prompt=prompt,
                size=size,
                quality=quality,
                background=background
            )
        else:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            image_files = [open(p, "rb") for p in images_paths]

            result = client.images.edit(
                model="gpt-image-1",
                image=image_files,
                prompt=prompt,
                size=size,
                quality=quality,
                background=background
            )

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        image_base64 = result.data[0].b64_json
        image_bytes = base64.b64decode(image_base64)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_photo(
            chat_id=user_id,
            photo=types.InputFile(BytesIO(image_bytes), filename="edited.png")
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await db.decrease_image_openai_balance(user_id)
        await db.add_action(user_id, "image_openai", "edit")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt[:50]}...")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    finally:
        await state.finish()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
        if image_file:
            image_file.close()
        if mask_file:
            mask_file.close()
        for f in image_files:
            f.close()

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for path in images_paths:
            if os.path.exists(path):
                os.remove(path)
        if mask_path and os.path.exists(mask_path):
            os.remove(mask_path)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å–∫–∏ –¥–ª—è inpainting
@dp.callback_query_handler(lambda c: c.data == "use_mask_for_edit")
async def use_mask_for_edit(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.edit_text("""<b>–í—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∑–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –º–∞—Å–∫—É, —É–∫–∞–∑—ã–≤–∞—é—â—É—é, –∫–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å–ª–µ–¥—É–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å.

üñºÔ∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</b>

<u><a href="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16">–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.</a></u>""",
                                           disable_web_page_preview=True, reply_markup=cancel_keyboard)
    await ImageGenerationStates.WAITING_FOR_IMAGE_FIRST.set()

#  –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
@dp.message_handler(content_types=['photo'], state=ImageGenerationStates.WAITING_FOR_IMAGE_FIRST)
async def handle_base_image_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    downloaded_file = await bot.download_file(file.file_path)

    temp_dir = tempfile.TemporaryDirectory()
    image_path = os.path.join(temp_dir.name, f"{user_id}_base.png")

    with open(image_path, 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())

    await state.update_data(base_image=image_path, temp_dir=temp_dir)
    await message.answer("üñºÔ∏è –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞—Å–∫—É. –ó–∞–∫—Ä–∞—à–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –±—É–¥—É—Ç –∏–∑–º–µ–Ω–µ–Ω—ã.", reply_markup=cancel_keyboard)
    await ImageGenerationStates.WAITING_FOR_MASK.set()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Å–∫–∏
@dp.message_handler(content_types=['photo'], state=ImageGenerationStates.WAITING_FOR_MASK)
async def handle_mask_upload(message: types.Message, state: FSMContext):
    data = await state.get_data()
    base_image_path = data.get("base_image")

    if not base_image_path:
        await message.answer("‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_keyboard)
        return

    user_id = message.from_user.id
    photo = message.photo[-1]
    file = await bot.get_file(photo.file_id)
    downloaded_file = await bot.download_file(file.file_path)

    mask_path = os.path.join(os.path.dirname(base_image_path), f"{user_id}_mask.png")

    with open(mask_path, 'wb') as new_file:
        new_file.write(downloaded_file.getvalue())

    await state.update_data(mask_path=mask_path)
    await message.answer("‚úçÔ∏è –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å.", reply_markup=cancel_keyboard)
    await ImageGenerationStates.WAITING_FOR_PROMPT.set()



@dp.callback_query_handler(lambda c: c.data == "cancel_action", state="*")
async def cancel_action_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    current_state = await state.get_state()
    if current_state:
        await state.finish()

    await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=image_openai_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–æ–≤–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
@dp.callback_query_handler(lambda c: c.data == "image_settings")
async def image_settings_handler(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    user = await db.get_user(user_id)
    settings = parse_image_settings(user["image_openai_settings"])

    size = settings["size"]
    quality = settings["quality"]
    background = settings["background"]

    text = f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\n"
    text += f"üìê –†–∞–∑–º–µ—Ä: <b>{size}</b>\n"
    text += f"üñºÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ: <b>{quality}</b>\n"
    text += f"üé® –§–æ–Ω: <b>{background}</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å."

    await callback_query.message.edit_text(text, reply_markup=image_settings_menu, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–º–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data.startswith("change_"))
async def show_settings_submenu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    data_map = {
        "change_size": ("üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä:", size_menu),
        "change_quality": ("üñºÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ:", quality_menu),
        "change_background": ("üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ–Ω:", background_menu),
    }

    msg, menu = data_map.get(callback_query.data, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", None))

    if menu:
        await callback_query.message.edit_text(msg, reply_markup=menu)
    else:
        await callback_query.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")

#  –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith("set_"))
async def update_setting(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    data = callback_query.data

    key_map = {
        "size": ["set_size_", "$1"],
        "quality": ["set_quality_", "$2"],
        "background": ["set_background_", "$3"],
    }

    for key, [prefix, path] in key_map.items():
        if data.startswith(prefix):
            value = data.replace(prefix, "").replace("_", " ")
            value = value.replace("png", "").strip()

            # –ï—Å–ª–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ transparent
            if key == "background" and value == "transparent":
                value = "transparent"
            elif key == "background":
                value = "opaque"

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON —Å—Ç—Ä–æ–∫—É
            json_value = f'"{value}"'

            await update_image_openai_settings(user_id, [key], json_value)

            await image_settings_handler(callback_query)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            break

@dp.callback_query_handler(lambda c: c.data == "back_to_settings")
async def back_to_settings(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await image_settings_handler(callback_query)

handlers\__init__.py
from handlers import admin
from handlers import users
from handlers import users_image_openai
from handlers import ref

keyboards\admin.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, \
    InlineKeyboardButton  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö)
cancel = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ –±–æ–Ω—É—Å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
admin_menu = InlineKeyboardMarkup(row_width=1).add(
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
    InlineKeyboardButton('–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', callback_data='admin_ref_menu'),
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏)
    InlineKeyboardButton('–ë–æ–Ω—É—Å —Å—Å—ã–ª–∫–∏', callback_data='admin_promo_menu'))

def more_stats_kb():
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='more_stats')
    )

def less_stats_kb():
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton('–ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='stats')
    )

keyboards\user.py
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, \
    ReplyKeyboardRemove, WebAppInfo  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from urllib import parse  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ (–≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –≤—ã–≤–æ–¥–∞)
withdraw_ref_menu = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("–ù–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É", callback_data='withdraw_ref:bank_card')).add(
    InlineKeyboardButton("QIWI", callback_data="withdraw_ref:qiwi"),
    InlineKeyboardButton("–ù–∞ –±–∞–ª–∞–Ω—Å", callback_data="withdraw_ref:balance")
)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Å—Å—ã–ª–∫–∞–º–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–µ–∫—Ç–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ
about = InlineKeyboardMarkup(row_width=2).add(InlineKeyboardButton("üì¢–ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞", url="https://t.me/NeuronAgent"),
                                              InlineKeyboardButton("üÜò–ü–æ–º–æ—â—å", url="https://t.me/NeuronSupportBot"),
                                              InlineKeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Midjourney", url="https://telegra.ph/Kak-polzovatsya-MidJourney-podrobnaya-instrukciya-10-16"))


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö)
cancel = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1).add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ)
top_up_balance = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üí∞–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="buy_sub"))


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
partner = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("‚ÜóÔ∏è–ü–µ—Ä–µ–π—Ç–∏ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/NeuronAgent"),
    InlineKeyboardButton("‚úÖ–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub"))


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
back_to_choose = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back_to_choose_balance"))


# –Ø–∑—ã–∫–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
lang_text = {"en": "ENG", "ru": "RUS"}


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å ChatGPT) –∏ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ
def get_clear_or_audio():    
    
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT", callback_data="settings"),
        InlineKeyboardButton("üó£–û–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="text_to_audio"),
        InlineKeyboardButton("üóÇ–ú–æ–∏ —á–∞—Ç—ã", callback_data="my_chats"),
        InlineKeyboardButton("üóë–£–¥–∞–ª–∏—Ç—å —á–∞—Ç", callback_data="delete_chat")
        )


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞, —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞, —Å–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫)
def get_account(lang, from_msg):

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üí∞–í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="buy_sub"),
        InlineKeyboardButton("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT", callback_data="settings")
    )

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ChatGPT
def settings(lang, from_msg):
    flag = 'üá∑üá∫' if lang == 'ru' else 'üá¨üáß'

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("ü§ñ–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å ChatGPT", callback_data="model_menu"),
        InlineKeyboardButton(f"–û—Ç–≤–µ—Ç—ã ChatGPT: {flag}", callback_data=f"change_lang:{lang}:{from_msg}"),
        InlineKeyboardButton("‚úçüèª–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ", callback_data="chatgpt_about_me"),
        InlineKeyboardButton("üé≠–•–∞—Ä–∞–∫—Ç–µ—Ä ChatGPT", callback_data="character_menu"),
        InlineKeyboardButton("üó£–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å ChatGPT", callback_data="voice_menu"),
        InlineKeyboardButton("üóÇ–ú–æ–∏ —á–∞—Ç—ã", callback_data="my_chats"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back_to_profile:acc")
    )

# –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ GPT –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
def model_keyboard(selected_model: str):
    models = {"4o": "GPT-4o",
              "o4-mini": "GPT-o4-mini",
              "4_1": "GPT-4.1",
              "o1": "GPT-o1"}
    buttons = [
        InlineKeyboardButton(
            f"{value}‚úÖ" if key == selected_model else value,
            callback_data=f"select_model:{key}"
        )
        for key, value in models.items()
    ]
    return InlineKeyboardMarkup(row_width=1).add(*buttons).add(
        InlineKeyboardButton("üìã–û—Ç–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π GPT", url="https://telegra.ph/Otlichiya-modelej-GPT-12-24"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back_to_profile:acc")
    )

# –í—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –¥–ª—è ChatGPT
def voice_keyboard(selected_voice: str):
    voices = {"alloy": "–î–∞–Ω–∏—ç–ª—å(Alloy)",
              "echo": "–ê–Ω—Ç–æ–Ω–∏–π(Echo)",
              "fable": "–ß–∞—Ä–ª–∏(Fable)",
              "onyx": "–ú–∏—Ö–∞–∏–ª(Onyx)", 
              "nova": "–≠–º–∏–ª–∏—è(Nova)", 
              "shimmer": "–°–∏–¥–Ω–∏(Shimmer)"}
    buttons = [
        InlineKeyboardButton(
            f"{value}‚úÖ" if key == selected_voice else value, 
            callback_data=f"select_voice:{key}"
        )
        for key, value in voices.items()
    ]
    return InlineKeyboardMarkup(row_width=2).add(*buttons).add(
        InlineKeyboardButton("üîâ–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–∞", callback_data="check_voice"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back_to_profile:acc")
    )


# –£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
def clear_description():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("‚úñÔ∏è–£–¥–∞–ª–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data="reset_chatgpt_settings"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="back_to_profile:acc")
    )


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ MidJourney)
def get_try_prompt(ai_type):

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data=f"try_prompt:{ai_type}"))


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç, —Å –∫–∞–∫–∏–º AI –æ–Ω —Ö–æ—á–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å (ChatGPT –∏–ª–∏ MidJourney)
def get_menu(default_ai):

    return ReplyKeyboardMarkup(resize_keyboard=True, row_width=2).add(KeyboardButton(f"{'üí¨ChatGPT‚úÖ' if default_ai == 'chatgpt' else 'üí¨ChatGPT'}"),
                                                                      # KeyboardButton(f"{'üé®Image OpenAI‚úÖ' if default_ai == 'image_openai' else 'üé®Image OpenAI'}"),
                                                                      KeyboardButton(f"{'üé®Midjourney‚úÖ' if default_ai == 'image' else 'üé®Midjourney'}"),
                                                                      KeyboardButton("‚öô–ê–∫–∫–∞—É–Ω—Ç"),
                                                                      KeyboardButton("üë®üèª‚Äçüíª–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
                                                                      KeyboardButton("ü§ù–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"))


# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã (Tinkoff, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –∏ —Ç.–¥.)
def get_pay_urls(urls, order_id, model, src='acc'):

    back = f"buy_chatgpt_tokens:{model}:normal" if model != 'midjourney' else 'buy_midjourney_requests'

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", url=urls["tinkoff"]),
        # InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", web_app=WebAppInfo(url=urls["freekassa"])),
        InlineKeyboardButton("Telegram Stars", callback_data=f"tg_stars:{order_id}"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=back))


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram Stars
def get_tg_stars_pay():

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton("Telegram Stars", pay=True))  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Telegram
    kb.add(InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=f"delete_msg"))  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    return kb


# –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π, –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞)
def get_ref_menu(url):

    text_url = parse.quote(url)  # –ö–æ–¥–∏—Ä—É–µ–º URL
    url = f'https://t.me/share/url?url={text_url}'  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
    return InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton('üì©–ü–æ–¥–µ–ª–∏—Ç—Å—è —Å—Å—ã–ª–∫–æ–π', url=url),
                                                 InlineKeyboardButton('üí≥–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤',
                                                                      callback_data='withdraw_ref_menu'),
                                                 InlineKeyboardButton('üîô–ù–∞–∑–∞–¥', callback_data='check_sub'))


# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∞—Ä–∏–∞—Ü–∏–∏, –∑—É–º –∏ —Ç.–¥.)
def get_try_prompt_or_choose(task_id, include_try=False):

    kb = InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("u1", callback_data=f"choose_image:{task_id}:1"),
        InlineKeyboardButton("u2", callback_data=f"choose_image:{task_id}:2"),
        InlineKeyboardButton("u3", callback_data=f"choose_image:{task_id}:3"),
        InlineKeyboardButton("u4", callback_data=f"choose_image:{task_id}:4"))
    if include_try:
        kb.add(InlineKeyboardButton("üîÑ –ï—â—ë –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"try_prompt:image"))  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–∞—Ä–∏–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
    return kb


# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≤–∞—Ä–∏–∞—Ü–∏—è, –∑—É–º –∏ —Ç.–¥.)
def get_choose(task_id):

    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("ü™Ñ Vary (Subtle)", callback_data=f"change_image:vary:low:{task_id}"),
        InlineKeyboardButton("ü™Ñ Vary (Strong)", callback_data=f"change_image:vary:high:{task_id}"),
        InlineKeyboardButton("üîç Zoom Out 2x", callback_data=f"change_image:zoom:2:{task_id}"),
        InlineKeyboardButton("üîç Zoom Out 1.5x", callback_data=f"change_image:zoom:1.5:{task_id}"))


''' –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT –∏–ª–∏ MJ '''

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤
def get_neural_network_menu():

    return InlineKeyboardMarkup(row_width=2).add(
        InlineKeyboardButton("üí¨ChatGPT", callback_data="select_gpt_tokens"),
        InlineKeyboardButton("üé®Midjourney", callback_data="buy_midjourney_requests")
    )

def get_chatgpt_models():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("GPT-4.1", callback_data="buy_chatgpt_tokens:4.1:normal"),
        InlineKeyboardButton("GPT-o1", callback_data="buy_chatgpt_tokens:o1:normal"),
        InlineKeyboardButton("üìã–û—Ç–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π GPT", url="https://telegra.ph/Otlichiya-modelej-GPT-12-24"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="buy_sub")
    )

def get_chatgpt_models_noback(discount=None):

    target = 'discount' if discount else 'normal'
    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("GPT-4.1", callback_data=f"buy_chatgpt_tokens:4.1:{target}"),
        InlineKeyboardButton("GPT-o1", callback_data=f"buy_chatgpt_tokens:o1:{target}"),
        InlineKeyboardButton("üìã–û—Ç–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π GPT", url="https://telegra.ph/Otlichiya-modelej-GPT-12-24"),
    )


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT
# Mode - Normal - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã, Discount - —É –Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞, Notification - –ø–µ—Ä–µ—à–µ–ª –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–∏–¥–∫–µ
# Model - 4.1, o1
def get_chatgpt_tokens_menu(mode, model):

    source = 'acc' if mode == 'normal' else 'not_gpt'
    back = "buy_sub" if mode == 'normal' else 'back_to_discount' 

    prices = {'4.1': {'normal': {'price': [199, 349, 469, 739, 10],
                                'percent': [0, 12, 21, 25, 0]},
                     'discount': {'price': ['199 > 189', '349 > 315', '469 > 412', '739 > 628', '10 > 5'],
                                  'price_data' : [189, 315, 412, 628, 5],
                                  'percent': [5, 10, 12, 15, 0]}},


              'o1': {'normal': {'price': [199, 349, 469, 739, 10],
                                'percent': [0, 12, 21, 25, 0]},
                     'discount': {'price': ['199 > 189', '349 > 315', '469 > 412', '739 > 628', '10 > 5'],
                                  'price_data' : [189, 315, 412, 628, 5],
                                  'percent': [5, 10, 12, 15, 0]}}}

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton(
            f"20 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, {prices[model][mode]['price'][0]}‚ÇΩ" + ('' if mode == 'normal' else f' (-{prices[model][mode]["percent"][0]}%)'), 
            callback_data=f"tokens:20000:{model}:{prices[model][mode]['price'][0] if mode == 'normal' else prices[model][mode]['price_data'][0]}:{source}"),
        InlineKeyboardButton(
            f"40 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, {prices[model][mode]['price'][1]}‚ÇΩ (-{prices[model][mode]['percent'][1]}%)", 
            callback_data=f"tokens:40000:{model}:{prices[model][mode]['price'][1] if mode == 'normal' else prices[model][mode]['price_data'][1]}:{source}"),
        InlineKeyboardButton(
            f"60 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, {prices[model][mode]['price'][2]}‚ÇΩ (-{prices[model][mode]['percent'][2]}%)",
            callback_data=f"tokens:60000:{model}:{prices[model][mode]['price'][2] if mode == 'normal' else prices[model][mode]['price_data'][2]}:{source}"),
        InlineKeyboardButton(
            f"100 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, {prices[model][mode]['price'][3]}‚ÇΩ (-{prices[model][mode]['percent'][3]}%)",
            callback_data=f"tokens:100000:{model}:{prices[model][mode]['price'][3] if mode == 'normal' else prices[model][mode]['price_data'][3]}:{source}"),
        # InlineKeyboardButton(
        #     f"1 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, {prices[model][mode]['price'][4]}‚ÇΩ (-{prices[model][mode]['percent'][4]}%)", 
        #     callback_data=f"tokens:1000:{model}:{prices[model][mode]['price'][4] if mode == 'normal' else prices[model][mode]['price_data'][4]}:{source}"),  
        InlineKeyboardButton("üìã–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç–æ–∫–µ–Ω—ã", url="https://telegra.ph/CHto-takoe-tokeny-12-23-3"),          
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data=back)
    )


# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Midjourney
def get_midjourney_requests_menu():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 149‚ÇΩ", callback_data="select_midjourney_requests:10:149:acc"),
        InlineKeyboardButton("20 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 259‚ÇΩ (-13%)", callback_data="select_midjourney_requests:20:259:acc"),
        InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 599‚ÇΩ (-19%)", callback_data="select_midjourney_requests:50:599:acc"),
        InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 1099‚ÇΩ (-26%)", callback_data="select_midjourney_requests:100:1099:acc"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="buy_sub")
    )

'''
# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT –°–û –°–ö–ò–î–ö–û–ô
def get_chatgpt_discount_tokens_menu():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("100 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, 149‚ÇΩ > 139‚ÇΩ (-5%)", callback_data="select_chatgpt_tokens:100000:139:acc"),
        InlineKeyboardButton("200 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, 249‚ÇΩ > 224‚ÇΩ (-10%)", callback_data="select_chatgpt_tokens:200000:224:acc"),
        InlineKeyboardButton("500 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, 449‚ÇΩ > 381‚ÇΩ (-15%)", callback_data="select_chatgpt_tokens:500000:381:acc"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="buy_sub")
    )
'''

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Midjourney –°–û –°–ö–ò–î–ö–û–ô
def get_midjourney_discount_requests_menu():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("10 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 149‚ÇΩ", callback_data="select_midjourney_requests:10:149:acc"),
        InlineKeyboardButton("20 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 259‚ÇΩ > 246‚ÇΩ (-5%)", callback_data="select_midjourney_requests:20:246:acc"),
        InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 599‚ÇΩ > 550‚ÇΩ (-8%)", callback_data="select_midjourney_requests:50:550:acc"),
        InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 1099‚ÇΩ > 989‚ÇΩ (-10%)", callback_data="select_midjourney_requests:100:989:acc"),
        InlineKeyboardButton("üîô–ù–∞–∑–∞–¥", callback_data="buy_sub")
    )

'''    
# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è ChatGPT –°–û –°–ö–ò–î–ö–û–ô –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
def get_chatgpt_discount_nofication():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("100 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, 149‚ÇΩ > 139‚ÇΩ (-5%)", callback_data="select_chatgpt_tokens:100000:139:not_gpt"),
        InlineKeyboardButton("200 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, 249‚ÇΩ > 224‚ÇΩ (-10%)", callback_data="select_chatgpt_tokens:200000:224:not_gpt"),
        InlineKeyboardButton("500 —Ç—ã—Å —Ç–æ–∫–µ–Ω–æ–≤, 449‚ÇΩ > 381‚ÇΩ (-15%)", callback_data="select_chatgpt_tokens:500000:381:not_gpt")
    )
'''

# –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è Midjourney –°–û –°–ö–ò–î–ö–û–ô –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
def get_midjourney_discount_notification():

    return InlineKeyboardMarkup(row_width=1).add(
        InlineKeyboardButton("20 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 259‚ÇΩ > 246‚ÇΩ (-5%)", callback_data="select_midjourney_requests:20:246:not_mj"),
        InlineKeyboardButton("50 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 599‚ÇΩ > 550‚ÇΩ (-8%)", callback_data="select_midjourney_requests:50:550:not_mj"),
        InlineKeyboardButton("100 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, 1099‚ÇΩ > 989‚ÇΩ (-10%)", callback_data="select_midjourney_requests:100:989:not_mj")
    )

# Inline-–º–µ–Ω—é –¥–ª—è "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç OpenAI"
image_openai_menu = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="generate_image_prompt"),
        ],
        [
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="edit_image"),
        ],
        [
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –º–∞—Å–∫–µ", callback_data="use_mask_for_edit"),
        ],
        [
            InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="image_settings"),
        ],
    ]
)

cancel_keyboard = InlineKeyboardMarkup().add(
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_action")
)

# Inline-–º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="/size ‚Äî –í—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data="set_size"),
            InlineKeyboardButton(text="/quality ‚Äî –í—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ", callback_data="set_quality"),
        ],
        [
            InlineKeyboardButton(text="/background ‚Äî –í—ã–±—Ä–∞—Ç—å —Ñ–æ–Ω", callback_data="set_background"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cancel_keyboard"),
        ],
    ]
)

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
size_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="1024x1024", callback_data="size_1024x1024"),
            InlineKeyboardButton(text="1536x1024", callback_data="size_1536x1024"),
            InlineKeyboardButton(text="1024x1536", callback_data="size_1024x1536"),
        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings"),
        ]
    ]
)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
image_settings_menu = InlineKeyboardMarkup(row_width=1).add(
    InlineKeyboardButton("üìê –†–∞–∑–º–µ—Ä", callback_data="change_size"),
    InlineKeyboardButton("üñºÔ∏è –ö–∞—á–µ—Å—Ç–≤–æ", callback_data="change_quality"),
    InlineKeyboardButton("üé® –§–æ–Ω", callback_data="change_background"),
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_action")
)

# –ü–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
size_menu = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("1024x1024", callback_data="set_size_1024x1024"),
    InlineKeyboardButton("1536x1024", callback_data="set_size_1536x1024"),
    InlineKeyboardButton("1024x1536", callback_data="set_size_1024x1536"),
    InlineKeyboardButton("auto", callback_data="set_size_auto"),
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
)

# –ü–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞
quality_menu = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("low", callback_data="set_quality_low"),
    InlineKeyboardButton("medium", callback_data="set_quality_medium"),
    InlineKeyboardButton("high", callback_data="set_quality_high"),
    InlineKeyboardButton("auto", callback_data="set_quality_auto"),
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
)

# –ü–æ–¥–º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ–Ω–∞
background_menu = InlineKeyboardMarkup(row_width=2).add(
    InlineKeyboardButton("opaque", callback_data="set_background_opaque"),
    InlineKeyboardButton("transparent", callback_data="set_background_transparent"),
    InlineKeyboardButton("auto", callback_data="set_background_auto"),
    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_settings")
)

keyboards\__init__.py


middlewares\album.py
import asyncio
from typing import Union

from aiogram import types
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware


class AlbumMiddleware(BaseMiddleware):
    """This middleware is for capturing media groups."""
    # album_data –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –æ—Ç–Ω–æ—Å—è—â–∏—Ö—Å—è –∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–µ (–∞–ª—å–±–æ–º—É)
    album_data: dict = {}

    def __init__(self, latency: Union[int, float] = 0.5):
        """
        Latency - —ç—Ç–æ –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –∞–ª—å–±–æ–º–∞
        –ø—Ä–∏—à–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö.
        """
        self.latency = latency  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∞–ª—å–±–æ–º–∞
        super().__init__()

    # –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def on_process_message(self, message: types.Message, data: dict):

        # –ï—Å–ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç media_group_id, —Ç–æ —ç—Ç–æ –Ω–µ –∞–ª—å–±–æ–º –∏ –¥–∞–ª—å–Ω–µ–π—à–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if not message.media_group_id:
            return

        try:
            # –ï—Å–ª–∏ —ç—Ç–æ—Ç media_group_id —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º
            self.album_data[message.media_group_id].append(message)
            raise CancelHandler()  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        except KeyError:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º media_group_id, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–ª—å–±–æ–º
            self.album_data[message.media_group_id] = [message]
            await asyncio.sleep(self.latency)  # –û–∂–∏–¥–∞–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –∞–ª—å–±–æ–º–µ
            message.conf["is_last"] = True
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª—å–±–æ–º (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å media_group_id) –≤ data, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –º–æ–≥–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            data["album"] = self.album_data[message.media_group_id]

    # –ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    async def on_post_process_message(self, message: types.Message, result: dict, data: dict):
        
        """Clean up after handling our album."""
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–ª—å–±–æ–º–µ, —É–¥–∞–ª—è–µ–º –∞–ª—å–±–æ–º –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if message.media_group_id and message.conf.get("is_last"):
            del self.album_data[message.media_group_id]


middlewares\check_sub.py
from aiogram.dispatcher.handler import CancelHandler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.types import Update, ChatMember
from aiogram.utils.exceptions import ChatNotFound

from keyboards import user as user_kb  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from config import channel_id, ADMINS  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤


class CheckRegMiddleware(BaseMiddleware):
    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–π, callback –∏ —Ç.–¥.)
    async def on_pre_process_update(self, update: Update, data: dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–∞
        if update.message:
            user_id = update.message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif update.callback_query:
            user_id = update.callback_query.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback
        else:
            return  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ callback, middleware –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ —Ñ–æ—Ç–æ (—Ñ–æ—Ç–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–æ–π)
            if (update.message.text and '/start' in update.message.text) or update.message.photo:
                return  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start –∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

        except AttributeError:
            # –ï—Å–ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ update –Ω–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ text –∏–ª–∏ photo, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            pass

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª —Å ID channel_id
            status: ChatMember = await update.bot.get_chat_member(channel_id, user_id)
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω (status == "left"), –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            if status.status == "left":
                if update.callback_query:
                    # –ï—Å–ª–∏ —ç—Ç–æ callback-–∑–∞–ø—Ä–æ—Å, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
                    await update.callback_query.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –∫–∞–Ω–∞–ª")
                else:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª
                        await update.bot.send_message(user_id, "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª",
                                               reply_markup=user_kb.partner)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
                    except:
                        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π

                raise CancelHandler()  # –û—Ç–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (middleware –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ)
        except ChatNotFound as e:
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–æ—à–∏–±–∫–∞ ChatNotFound), —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            pass
            # print(e)
            # await update.bot.send_message(ADMINS[0], "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞–Ω–∞–ª–æ–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º")


middlewares\__init__.py


states\admin.py
from aiogram.dispatcher.filters.state import StatesGroup, State  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

# –ö–ª–∞—Å—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (Mailing)
class Mailing(StatesGroup):
    enter_text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    confirm = State()     # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
class TokenAdding(StatesGroup):
    enter_user_id = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ user_id
    choose_token_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç–æ–∫–µ–Ω–æ–≤
    enter_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤

states\user.py
from aiogram.dispatcher.filters.state import StatesGroup, State  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏

# –ö–ª–∞—Å—Å –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ ChatGPT –∏ MidJourney
class EnterPromt(StatesGroup):
    gpt_prompt = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ ChatGPT
    mdjrny_prompt = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ MidJourney

# –ö–ª–∞—Å—Å –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
class EnterAmount(StatesGroup):
    enter_amount = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

# –ö–ª–∞—Å—Å –¥–ª—è –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –∫–æ—à–µ–ª—å–∫–∞)
class EnterWithdrawInfo(StatesGroup):
    purse = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤

# –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è ChatGPT (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ)
class ChangeChatGPTAboutMe(StatesGroup):
    text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è ChatGPT

class ChangeChatGPTCharacter(StatesGroup):
    text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è ChatGPT

# –ö–ª–∞—Å—Å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–Ω, —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤)
class ChangeChatGPTSettings(StatesGroup):
    text = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è ChatGPT

# –ö–ª–∞—Å—Å –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
class EnterChatName(StatesGroup):
    chat_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞


# –ö–ª–∞—Å—Å –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏–º–µ—é—â–µ–≥–æ—Å—è —á–∞—Ç–∞
class EnterChatRename(StatesGroup):
    chat_name = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞


states\__init__.py


utils\ai.py
import logging
import openai
from openai import OpenAI
from aiogram import Bot  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
from aiogram.types.input_file import InputFile
from googletranslatepy import Translator  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
import speech_recognition as sr  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
from pydub import AudioSegment  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É–¥–∏–æ
import tempfile
import os
from config import OPENAPI_TOKEN, midjourney_webhook_url, MJ_API_KEY, TNL_API_KEY, TOKEN, NOTIFY_URL, TNL_API_KEY1, \
    ADMINS_CODER, PROJECT_MANAGER  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
from utils import db  # –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from utils.mj_apis import GoAPI, ApiFrame, MidJourneyAPI


logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è OpenAI
client = OpenAI(api_key=OPENAPI_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MidJourneyAPI
mj_api = MidJourneyAPI(primary_api="goapi")  # –ù–∞—á–Ω–µ–º —Å GoAPI

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è MidJourney —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏–Ω–¥–µ–∫—Å–∞
def get_mj_token(index):

    if index == 0:
        return TNL_API_KEY
    elif index == 1:
        return TNL_API_KEY1


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –≤ AI)
async def add_mj_action(user_id, action_type):

    action_id = await db.add_action(user_id, action_type)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ
    try:
        requests.post(NOTIFY_URL + f"/action/{action_id}")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
    except:
        pass
    return action_id

my_bot = Bot(TOKEN)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É –±–æ—Ç–∞
async def send_error(text):
    await my_bot.send_message(ADMINS_CODER, text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫
async def get_translate(text):
    # –ó–∞–º–µ–Ω—è–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Ç–∏—Ä–µ –Ω–∞ –¥–≤–∞ –¥–µ—Ñ–∏—Å–∞
    text = text.replace("‚Äî", "--")

    # –í—ã–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    special_tags = re.findall(r'--\w+(?: [\w:]+)?', text)
    clean_text = re.sub(r'--\w+(?: [\w:]+)?', '', text).strip()

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º
    translator = Translator(target="en")
    translated = translator.translate(clean_text)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ –¥–µ—Ñ–∏—Å–∞–º–∏
    translated = re.sub(r'\s+-(\w)', r'-\1', translated)

    # –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å—ë
    result = f"{translated.strip()} {' '.join(special_tags)}"
    return result



import base64
import requests
import re


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def image_url_to_base64(url):
    response = requests.get(url)
    if response.status_code == 200:
        image_base64 = base64.b64encode(response.content).decode('utf-8')
        return f"data:image/jpeg;base64,{image_base64}"  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-—Ç–∏–ø (jpeg/png)
    return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ ChatGPT
async def get_gpt(messages, model):
    status = True
    tokens = 0
    content = ""

    try:
        model_map = {
            '4o-mini': 'gpt-4o-mini',
            '4o': 'gpt-4o',
            '4_1': 'gpt-4.1',
            'o1': 'o1',
            'o4-mini': 'o4-mini'
        }

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for message in messages:
            if message["role"] == "user":
                if isinstance(message["content"], list):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ content —Å–ø–∏—Å–∫–æ–º
                    logger.info('message["content"] is list')
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    image_urls = [
                        item["image_url"]["url"]
                        for item in message["content"]
                        if item["type"] == "image_url"
                    ]
                    text_content = " ".join(
                        item["text"]
                        for item in message["content"]
                        if item["type"] == "text"
                    ).strip()
                else:
                    logger.info('message["content"] is string')
                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ
                    image_urls = re.findall(r'(https?://\S+\.(?:jpg|jpeg|png|gif))', message["content"])
                    text_content = re.sub(r'(https?://\S+\.(?:jpg|jpeg|png|gif))', '', message["content"]).strip()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Å type: image_url
                new_content = []

                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
                if text_content:
                    new_content.append({"type": "text", "text": text_content})

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64
                for url in image_urls:
                    base64_image = image_url_to_base64(url)
                    if base64_image:
                        new_content.append({
                            "type": "image_url",
                            "image_url": {"url": base64_image}
                        })

                # –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ
                message["content"] = new_content

        if model in {'o1'}:
            if messages and messages[0]["role"] == "system":
                messages[0] = {"role": "user", "content": "You are a helpful assistant."}

        logger.info(f'MESSAGES: {messages}')
        try:
            response = client.chat.completions.create(
                model=f"{model_map[model]}",
                messages=messages[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            )
        except Exception as e:
            response = client.chat.completions.create(
                model=f"{model_map['4o']}",
                messages=messages[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            )
            logging.error(f'ChatGPT Error model{model} \n {e}')


        content = response.choices[0].message.content  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        tokens = response.usage.total_tokens  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤


    except openai.OpenAIError as e:
        status = False
        error_message = str(e)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
        logging.error(f'ChatGPT Error {error_message}')
        if "insufficient_quota" in error_message:
            await my_bot.send_message(PROJECT_MANAGER, "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞–ª–∞–Ω—Å ChatGPT –∏—Å—á–µ—Ä–ø–∞–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å! üí≥")
        else:
            content = "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–¥–Ω–µ–µ."

    return {"status": status, "content": content, "tokens": tokens}  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ MidJourney
async def get_mdjrny(prompt, user_id):

    translated_prompt = await get_translate(prompt)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    request_id = await db.add_action(user_id, "image", "imagine")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    response = await mj_api.imagine(translated_prompt, request_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Midjourney

    return response


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ MidJourney
async def get_choose_mdjrny(task_id, image_id, user_id):

    action_id = await db.add_action(user_id, "image", "upscale")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    response = await mj_api.upscale(task_id, image_id, action_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return response


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ MidJourney (–≤–∞—Ä–∏–∞—Ü–∏–∏ –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏—è)
async def press_mj_button(button, buttonMessageId, user_id, api_key_number):
    
    action_id = await db.add_action(user_id, "image", "imagine")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    status = True
    api_key = get_mj_token(api_key_number)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    try:
        payload = {
            "button": button,
            "buttonMessageId": buttonMessageId,
            "ref": str(action_id),
            "webhookOverride": midjourney_webhook_url + "/button"
        }
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {api_key}'
        }
        res = requests.post("https://api.justimagineapi.org/v1" + "/button", json=payload, headers=headers)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        res = res.json()
    except requests.exceptions.JSONDecodeError:
        status = False  # –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON
    return status


"""–†–∞–±–æ—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç
def voice_to_text(file_path):
    recognizer = sr.Recognizer()
    audio = AudioSegment.from_file(file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π wav-—Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_wav_file:
        audio.export(temp_wav_file.name, format="wav")
        temp_wav_file_path = temp_wav_file.name

    with sr.AudioFile(temp_wav_file_path) as source:
        audio_data = recognizer.record(source)
        
    os.remove(temp_wav_file_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    
    try:
        text = recognizer.recognize_google(audio_data, language="ru-RU")
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
    except sr.RequestError:
        return "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"

def text_to_speech(text, model="tts-1", voice="onyx"):

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
    with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_audio_file:
        temp_audio_path = temp_audio_file.name

    # –ó–∞–ø—Ä–æ—Å –∫ OpenAI –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ
    response = client.audio.speech.create(
        model=model,
        voice=voice,
        input=text
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    response.stream_to_file(temp_audio_path)
    audio_file = InputFile(temp_audio_path)

    return audio_file




utils\db.py
from datetime import datetime, date, time, timedelta
import asyncpg
import logging
from zoneinfo import ZoneInfo
from typing import Dict, Any
from asyncpg import Connection
from config import DB_USER, DB_HOST, DB_DATABASE, DB_PASSWORD
import uuid


logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_conn() -> Connection:

    return await asyncpg.connect(user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE, host=DB_HOST)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async def start():
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
    await create_tables()
    conn: Connection = await get_conn()
    await conn.execute(
        "CREATE TABLE IF NOT EXISTS users ("
        "user_id BIGINT PRIMARY KEY,"
        "username VARCHAR(32),"
        "first_name VARCHAR(64),"
        "balance INT DEFAULT 0,"
        "reg_time INT,"
        "free_image SMALLINT DEFAULT 3,"
        "default_ai VARCHAR(10) DEFAULT 'empty',"
        "inviter_id BIGINT,"
        "ref_balance INT DEFAULT 0,"
        "task_id VARCHAR(1024) DEFAULT '0',"
        "chat_gpt_lang VARCHAR(2) DEFAULT 'ru',"
        "stock_time INT DEFAULT 0,"
        "new_stock_time INT DEFAULT 0,"
        "is_pay BOOLEAN DEFAULT FALSE,"
        "chatgpt_about_me VARCHAR(256) DEFAULT '',"
        "chatgpt_settings VARCHAR(256) DEFAULT '',"
        "sub_time TIMESTAMP DEFAULT NOW(),"
        "sub_type VARCHAR(12),"
        "tokens_4_1 INTEGER DEFAULT 5000,"
        "tokens_o1 INTEGER DEFAULT 5000,"
        "tokens_o3 INTEGER DEFAULT 5000,"
        "tokens_4o INTEGER DEFAULT 200000,"
        "tokens_4o_mini INTEGER DEFAULT 100000,"
        "tokens_o1_preview INTEGER DEFAULT 0,"
        "tokens_o1_mini INTEGER DEFAULT 1000,"
        "tokens_o3_mini INTEGER DEFAULT 200000,"
        "tokens_o4_mini INTEGER DEFAULT 200000,"
        "gpt_model VARCHAR(10) DEFAULT '4o',"
        "voice VARCHAR(64) DEFAULT 'onyx',"
        "chatgpt_character VARCHAR(256) DEFAULT '',"
        "mj INTEGER DEFAULT 0,"
        "is_notified BOOLEAN DEFAULT FALSE,"
        "image_openai INTEGER DEFAULT 0,"
        "free_image_openai INTEGER DEFAULT 3,"
        "used_trial BOOLEAN DEFAULT FALSE,"
        "is_subscribed BOOLEAN DEFAULT FALSE,"
        "image_openai_settings JSONB DEFAULT '{\"size\": \"1024x1024\", \"quality\": \"medium\", \"background\": \"opaque\"}')"

    )

    await conn.execute(
        "CREATE TABLE IF NOT EXISTS usage("
        "id SERIAL PRIMARY KEY,"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
        "user_id BIGINT,"  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "ai_type VARCHAR(10),"  # –¢–∏–ø –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ - midjourney, chatgpt, 4o, o1
        "image_type VARCHAR(255),"  # –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
        "use_time INT,"  
        "get_response BOOLEAN DEFAULT FALSE,"
        "create_time TIMESTAMP DEFAULT NOW(),"
        "external_task_id VARCHAR(1024))"
    )

    await conn.execute(
        "CREATE TABLE IF NOT EXISTS withdraws(id SERIAL PRIMARY KEY, user_id BIGINT, amount INT, withdraw_time INT)")

    await conn.execute("CREATE TABLE IF NOT EXISTS config(config_key VARCHAR(32), config_value VARCHAR(256))")

    await conn.execute("CREATE TABLE IF NOT EXISTS promocode("
                       "promocode_id SMALLSERIAL,"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–∞
                       "amount INTEGER,"  # –°—É–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
                       "uses_count SMALLINT,"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
                       "code VARCHAR(10) UNIQUE)")  # –°–∞–º –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞

    await conn.execute("CREATE TABLE IF NOT EXISTS user_promocode("
                       "promocode_id SMALLINT,"  # ID –ø—Ä–æ–º–æ–∫–æ–¥–∞
                       "user_id BIGINT)")  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º

    await conn.execute(
        "CREATE TABLE IF NOT EXISTS orders ("
        "id SERIAL PRIMARY KEY,"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        "user_id BIGINT,"  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "amount INT,"  # –°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏
        "order_type VARCHAR(10),"  # –¢–∏–ø –∑–∞–∫–∞–∑–∞: 'chatgpt' –∏–ª–∏ 'midjourney'
        "quantity INT,"  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        "create_time TIMESTAMP DEFAULT NOW(),"  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        "pay_time TIMESTAMP,"  # –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
        "order_id UUID UNIQUE,"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        "payment_id TEXT"  # ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ Tinkoff (–∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞ TEXT)
        ")"
    )

    await conn.execute(
        "CREATE TABLE IF NOT EXISTS discount_gpt ("
        "user_id BIGINT PRIMARY KEY,"           # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "is_notified BOOLEAN DEFAULT FALSE,"    # –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        "last_notification TIMESTAMP,"           # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        "used BOOLEAN DEFAULT FALSE)"           # –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏
    )

    await conn.execute(
        "CREATE TABLE IF NOT EXISTS discount_mj ("
        "user_id BIGINT PRIMARY KEY,"           # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "is_notified BOOLEAN DEFAULT FALSE,"    # –°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        "last_notification TIMESTAMP,"           # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        "used BOOLEAN DEFAULT FALSE)"           # –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∫–∏–¥–∫–∏
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã stars
    await conn.execute(
        "CREATE TABLE IF NOT EXISTS stars ("
        "id SERIAL PRIMARY KEY, "
        "user_id BIGINT, "
        "date DATE NOT NULL, "
        "amount INTEGER NOT NULL DEFAULT 1"
        ")"
    )



    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∏ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    row = await conn.fetchrow("SELECT config_value FROM config WHERE config_key = 'iam_token'")
    if row is None:
        await conn.execute("INSERT INTO config VALUES('iam_token', '1')")
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def get_users():

    conn: Connection = await get_conn()
    rows = await conn.fetch("SELECT user_id FROM users")
    await conn.close()
    return rows

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
async def add_tokens(user_id: int, token_type, amount):
    conn = await get_conn()
    await conn.execute(
        f"UPDATE users SET {token_type} = {token_type} + $1 WHERE user_id = $2",
        amount, user_id
    )
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ user_id
async def get_user(user_id):

    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM users WHERE user_id = $1", user_id)
    await conn.close()
    return row

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã—Ä–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–µ
async def get_voice(user_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT voice FROM users WHERE user_id = $1", user_id)
    await conn.close()
    return row["voice"] if row else 'onyx'  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def set_voice(user_id, voice):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET voice = $2 WHERE user_id = $1", user_id, voice)
    await conn.close()
    

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ GPT
async def get_model(user_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT gpt_model FROM users WHERE user_id = $1", user_id)
    await conn.close()
    return row["gpt_model"]


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å GPT –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def set_model(user_id, gpt_model):
    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET gpt_model = $2 WHERE user_id = $1", user_id, gpt_model)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def add_user(user_id, username, first_name, inviter_id):
    conn: Connection = await get_conn()
    await conn.execute(
        "INSERT INTO users(user_id, username, first_name, reg_time, inviter_id, free_image, tokens_o1, tokens_4_1, tokens_4o, tokens_o4_mini, is_subscribed, used_trial) "
        "VALUES ($1, $2, $3, $4, $5, 3, 5000, 5000, 200000, 200000, FALSE, FALSE)",
        user_id, username, first_name, int(datetime.now().timestamp()), inviter_id
    )
    await conn.close()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è task_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_task_id(user_id, task_id):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET task_id = $2 WHERE user_id = $1", user_id, task_id)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–ª–∞–≥–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_is_pay(user_id, is_pay):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET is_pay = $2 WHERE user_id = $1", user_id, is_pay)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è ChatGPT
async def update_chatgpt_about_me(user_id, text):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET chatgpt_about_me = $2 WHERE user_id = $1", user_id, text)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ ChatGPT
async def update_chatgpt_character(user_id, text):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET chatgpt_character = $2 WHERE user_id = $1", user_id, text)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ChatGPT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_chatgpt_settings(user_id, text):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET chatgpt_settings = $2 WHERE user_id = $1", user_id, text)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è AI –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def change_default_ai(user_id, ai_type):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET default_ai = $2 WHERE user_id = $1", user_id, ai_type)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_free_chatgpt(user_id, tokens):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET tokens_4o = tokens_4o - $2 WHERE user_id = $1", user_id, tokens)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ ChatGPT —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_chatgpt(user_id, tokens, model):

    conn: Connection = await get_conn()
    dashed_model = model.replace("-", "_")
    column = f'tokens_{dashed_model}'

    if column not in {'tokens_4_1', 'tokens_4o', 'tokens_4o_mini', 'tokens_o1', 'tokens_o4_mini'}:
        raise ValueError(f"Invalid model {column}")

    await conn.execute(
        f"""
        UPDATE users
        SET {column} = GREATEST({column} - $2, 0)
        WHERE user_id = $1
        """,
        user_id, tokens
    )
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_free_image(user_id):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET free_image = free_image - 1 WHERE user_id = $1", user_id)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ MidJourney —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def remove_image(user_id):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET mj = mj - 1 WHERE user_id = $1", user_id)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_stock_time(user_id, stock_time):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET stock_time = $2 WHERE user_id = $1", user_id, stock_time)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ü–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_new_stock_time(user_id, new_stock_time):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET new_stock_time = $2 WHERE user_id = $1", user_id, new_stock_time)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (10)
async def remove_balance(user_id):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET balance = balance - 10 WHERE user_id = $1", user_id)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def add_balance_from_admin(user_id, amount):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET balance = balance + $2 WHERE user_id = $1", user_id, amount)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–æ–º–æ–∞–∫—Ü–∏—è
async def add_balance(user_id, amount, is_promo=False):

    conn: Connection = await get_conn()
    ref_balance = int(float(amount) * 0.15)
    await conn.execute("UPDATE users SET balance = balance + $2 WHERE user_id = $1", user_id, amount)
    if not is_promo:
        await conn.execute(
            "UPDATE users SET ref_balance = ref_balance + $2 WHERE user_id = (SELECT inviter_id FROM users WHERE user_id = $1)",
            user_id, ref_balance)
    await conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def check_discount_order(user_id):

    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM sub_orders WHERE user_id = $1 and with_discount = TRUE", user_id)
    await conn.close()
    return row


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ —Å—á–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
async def add_balance_from_ref(user_id):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET balance = balance + ref_balance, ref_balance = 0 WHERE user_id = $1",
                       user_id)
    await conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ payment_id
async def get_order_by_payment_id(payment_id):
    conn = await get_conn()
    row = await conn.fetchrow("SELECT * FROM orders WHERE payment_id = $1", payment_id)
    await conn.close()
    return row



# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞ ChatGPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def change_chat_gpt_lang(user_id, new_lang):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET chat_gpt_lang = $2 WHERE user_id = $1",
                       user_id, new_lang)
    await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ ChatGPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_chat_gpt_lang(user_id):
    conn: Connection = await get_conn()
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        result = await conn.fetchval(
            "SELECT chat_gpt_lang FROM users WHERE user_id = $1",
            user_id
        )
        return result  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        raise e
    finally:
        await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_ref_stat(user_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow(
        "SELECT (SELECT CAST(SUM(amount) * 0.15 AS INT) FROM orders "
        "WHERE EXISTS(SELECT 1 FROM users WHERE inviter_id = $1 AND users.user_id = orders.user_id) "
        "AND pay_time IS NOT NULL) AS all_income,"
        "(SELECT ref_balance FROM users WHERE user_id = $1) AS available_for_withdrawal,"
        "(SELECT COUNT(user_id) FROM users WHERE inviter_id = $1) AS count_refs,"
        "(SELECT COUNT(id) FROM orders JOIN users u ON orders.user_id = u.user_id "
        "WHERE u.inviter_id = $1 AND orders.pay_time IS NOT NULL) AS orders_count",
        user_id
    )

    await conn.close()
    return row



# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–º–∏
async def get_all_inviters():

    conn: Connection = await get_conn()
    rows = await conn.fetch('select distinct inviter_id from users where inviter_id != 0')
    await conn.close()
    return rows


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ AI)
async def add_action(user_id, ai_type, image_type=''):

    conn: Connection = await get_conn()
    action = await conn.fetchrow("INSERT INTO usage(user_id, ai_type, image_type) VALUES ($1, $2, $3) RETURNING id",
                                 user_id, ai_type, image_type)
    await conn.close()
    return action["id"]


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ –µ–≥–æ ID
async def get_action(action_id):

    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM usage WHERE id = $1", action_id)
    await conn.close()
    return row


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–≤—è–∑–∏ –º–µ–∂–¥—É task_id –∏ action_id
async def update_action_with_task_id(request_id, task_id):
    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE usage SET external_task_id = $1 WHERE id = $2",
        task_id, request_id
    )
    await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ task_id
async def get_action_by_task_id(task_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM usage WHERE external_task_id = $1", task_id)
    await conn.close()
    return row



# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –ø–æ action_id
async def get_task_by_action_id(action_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT external_task_id FROM usage WHERE id = $1", action_id)
    await conn.close()
    return row


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –ø–æ–ª—É—á–µ–Ω
async def set_action_get_response(usage_id):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE usage SET get_response = TRUE WHERE id = $1", usage_id)
    await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
async def get_iam_token():

    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT config_value FROM config WHERE config_key = 'iam_token'")
    await conn.close()
    return row['config_value']


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ IAM —Ç–æ–∫–µ–Ω–∞
async def change_iam_token(iam_token):

    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE config SET config_value = $1 WHERE config_key = 'iam_token'", iam_token)
    await conn.close()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
async def add_withdraw(user_id, amount):

    conn: Connection = await get_conn()
    await conn.execute("INSERT INTO withdraws(user_id, amount, withdraw_time) VALUES ($1, $2, $3)",
                       user_id, amount, int(datetime.now().timestamp()))
    await conn.close()


# –°–±—Ä–æ—Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def reset_ref_balance(user_id):

    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE users SET ref_balance = 0 WHERE user_id = $1", user_id)
    await conn.close()


# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def create_promocode(amount, uses_count, code):

    conn: Connection = await get_conn()
    await conn.execute(
        "INSERT INTO promocode(amount, uses_count, code) VALUES ($1, $2, $3)", amount, uses_count, code)
    await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –µ–≥–æ –∫–æ–¥—É
async def get_promocode_by_code(code):

    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM promocode WHERE code = $1", code)
    await conn.close()
    return row


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def create_user_promocode(promocode_id, user_id):

    conn: Connection = await get_conn()
    await conn.execute(
        "INSERT INTO user_promocode(promocode_id, user_id) VALUES ($1, $2)", promocode_id, user_id)
    await conn.close()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ –µ–≥–æ ID –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_promocode_by_promocode_id_and_user_id(promocode_id, user_id):

    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM user_promocode WHERE promocode_id = $1 and user_id = $2", promocode_id,
                              user_id)
    await conn.close()
    return row


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID
async def get_all_user_promocode_by_promocode_id(promocode_id):

    conn: Connection = await get_conn()
    rows = await conn.fetch("SELECT * FROM user_promocode WHERE promocode_id = $1", promocode_id)
    await conn.close()
    return rows


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º
async def get_promo_for_stat():

    conn: Connection = await get_conn()
    rows = await conn.fetch("""select code, amount, uses_count, count(up.user_id) as users_count
from promocode
         left join user_promocode up on promocode.promocode_id = up.promocode_id
group by promocode.promocode_id, amount, uses_count, code
having count(up.user_id) < uses_count""")
    await conn.close()
    return rows


""" –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –¢–û–ö–ï–ù–û–í –ò –ó–ê–ü–†–û–°–û–í """
""" –ó–∞–∫–∞–∑—ã —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã/–∑–∞–ø—Ä–æ—Å—ã
async def add_order(user_id, amount, order_type, quantity):
    conn: Connection = await get_conn()

    order_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID

    row = await conn.fetchrow(
        "INSERT INTO orders(order_id, user_id, amount, order_type, quantity, pay_time) "
        "VALUES ($1, $2, $3, $4, $5, NULL) RETURNING *",
        order_id, user_id, amount, order_type, quantity
    )

    await conn.close()
    return row["order_id"]  # –¢–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `order_id`


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –ø–æ ID
async def get_order(order_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM orders WHERE order_id = $1", order_id)
    await conn.close()
    return row



# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
async def set_order_pay(order_id):
    conn: Connection = await get_conn()
    await conn.execute("UPDATE orders SET pay_time = NOW() WHERE order_id = $1", order_id)
    await conn.close()



''' –¢–æ–∫–µ–Ω—ã –∏ –ó–∞–ø—Ä–æ—Å—ã '''

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_tokens(user_id, new_tokens, model):

    conn: Connection = await get_conn()
    dashed_model = model.replace("-", "_")
    column = f'tokens_{dashed_model}'
    if column not in {'tokens_4_1', 'tokens_4o', 'tokens_o4_mini', 'tokens_o1'}:
        raise ValueError(f"Invalid model {column}")

    await conn.execute(f"UPDATE users SET {column} = $2 WHERE user_id = $1", user_id, new_tokens)
    await conn.close()


# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ MidJourney —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def update_requests(user_id, new_requests):

    conn: Connection = await get_conn()
    await conn.execute("UPDATE users SET mj = $2 WHERE user_id = $1", user_id, new_requests)
    await conn.close()


"""–°–∫–∏–¥–∫–∞ ChatGPT"""

async def get_user_notified_gpt(user_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow(
        "SELECT is_notified, last_notification, used FROM discount_gpt WHERE user_id = $1", 
        user_id)
    await conn.close()
    return row

async def create_user_notification_gpt(user_id):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn: Connection = await get_conn()
    await conn.execute(
        """
        INSERT INTO discount_gpt (user_id, is_notified, last_notification) 
        VALUES ($1, TRUE, NOW()) 
        ON CONFLICT (user_id) 
        DO UPDATE SET is_notified = TRUE, last_notification = NOW()
        """,
        user_id
    )
    await conn.close()

async def update_user_notification_gpt(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE discount_gpt SET is_notified = TRUE, last_notification = NOW() WHERE user_id = $1",
        user_id)
    await conn.close()

async def update_used_discount_gpt(user_id):
    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE discount_gpt SET used = TRUE WHERE user_id = $1",
        user_id)
    await conn.close()

"""–°–∫–∏–¥–∫–∞ Midjourney"""

async def get_user_notified_mj(user_id):
    conn: Connection = await get_conn()
    row = await conn.fetchrow(
        "SELECT is_notified, last_notification, used FROM discount_mj WHERE user_id = $1", 
        user_id)
    await conn.close()
    return row

async def create_user_notification_mj(user_id):
    """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    conn: Connection = await get_conn()
    await conn.execute(
        """
        INSERT INTO discount_mj (user_id, is_notified, last_notification) 
        VALUES ($1, TRUE, NOW()) 
        ON CONFLICT (user_id) 
        DO UPDATE SET is_notified = TRUE, last_notification = NOW()
        """,
        user_id
    )
    await conn.close()

async def update_user_notification_mj(user_id):
    """–û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE discount_mj SET is_notified = TRUE, last_notification = NOW() WHERE user_id = $1",
        user_id)
    await conn.close()

async def update_used_discount_mj(user_id):
    conn: Connection = await get_conn()
    await conn.execute(
        "UPDATE discount_mj SET used = TRUE WHERE user_id = $1",
        user_id)
    await conn.close()


# –î–µ–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 29 –¥–Ω–µ–π –ø–æ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
async def has_matching_orders(user_id: int) -> bool:
    try:
        conn: Connection = await get_conn()
        try:
            row = await conn.fetchrow(
                """
                SELECT EXISTS(
                    SELECT 1
                    FROM orders
                    WHERE user_id = $1
                      AND pay_time IS NOT NULL
                      AND pay_time >= NOW() - INTERVAL '29 days'
                      AND order_type IN ('4_1', 'o1')
                ) AS exists
                """,
                user_id
            )
            return row['exists']
        finally:
            await conn.close()
    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return False


'''
–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ê
'''

CHATGPT_ORDER_TYPES = ['4o', 'o4-mini', '4_1', 'o1']
CHATGPT_QUANTITIES = [20000, 40000, 60000, 100000]
MIDJOURNEY_QUANTITIES = [10, 20, 50, 100]


def escape_markdown(text: Any) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2.
    """
    text = str(text)
    escape_chars = r'\`*_{}[]()#+-.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])


async def fetch_statistics() -> str:
    """
    C–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    """
    try:
        conn: asyncpg.Connection = await get_conn()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ –∏ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        moscow_tz = ZoneInfo("Europe/Moscow")
        now_moscow = datetime.now(moscow_tz)
        start_of_day = now_moscow.replace(hour=0, minute=0, second=0, microsecond=0).replace(tzinfo=None)
        logger.info(f"–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è: {start_of_day.isoformat()}")

        # –ó–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        # –í—Å–µ –æ–ø–ª–∞—Ç—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
        all_time_orders = await conn.fetch("""
            SELECT order_type, quantity, COUNT(*) AS count, SUM(amount) AS total_amount
            FROM orders
            WHERE pay_time IS NOT NULL
            GROUP BY order_type, quantity
        """)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(all_time_orders)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è")

        # –û–ø–ª–∞—Ç—ã —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        todays_orders = await conn.fetch("""
            SELECT order_type, quantity, COUNT(*) AS count, SUM(amount) AS total_amount
            FROM orders
            WHERE pay_time >= $1 AND pay_time IS NOT NULL
            GROUP BY order_type, quantity
        """, start_of_day)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(todays_orders)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await conn.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        statistics = {
            'all_time': process_orders(all_time_orders),
            'today': process_orders(todays_orders)
        }

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        formatted_statistics = format_statistics(statistics)
        return formatted_statistics

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"

def process_orders(orders) -> Dict[str, Any]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–æ–≤ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    chatgpt_stats = {
        order_type: {
            'quantities': {qty: 0 for qty in CHATGPT_QUANTITIES},
            'count': 0,
            'amount': 0
        } for order_type in CHATGPT_ORDER_TYPES
    }
    total_chatgpt_count = 0
    total_chatgpt_amount = 0
    midjourney_stats = {qty: 0 for qty in MIDJOURNEY_QUANTITIES}
    midjourney_totals = {'total_count': 0, 'total_amount': 0}

    for record in orders:
        order_type = record['order_type']
        quantity = record['quantity']
        count = record['count']
        amount = record['total_amount'] or 0  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö NULL –∑–Ω–∞—á–µ–Ω–∏–π

        if order_type in CHATGPT_ORDER_TYPES:
            if quantity in CHATGPT_QUANTITIES:
                chatgpt_stats[order_type]['quantities'][quantity] += count
                chatgpt_stats[order_type]['count'] += count
                chatgpt_stats[order_type]['amount'] += amount
                total_chatgpt_count += count
                total_chatgpt_amount += amount
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è ChatGPT: {quantity}")
        elif order_type == 'midjourney':
            if quantity in MIDJOURNEY_QUANTITIES:
                midjourney_stats[quantity] += count
                midjourney_totals['total_count'] += count
                midjourney_totals['total_amount'] += amount
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è Midjourney: {quantity}")
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞: {order_type}")

    return {
        'ChatGPT': {
            'details': chatgpt_stats,
            'total_count': total_chatgpt_count,
            'total_amount': total_chatgpt_amount
        },
        'Midjourney': {
            'details': midjourney_stats,
            'total_count': midjourney_totals['total_count'],
            'total_amount': midjourney_totals['total_amount']
        }
    }

def format_statistics(statistics: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """
    def format_order(order_stats: Dict[str, Any], title: str) -> str:
        lines = [f"*{escape_markdown(title)}:*"]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ChatGPT
        chatgpt = order_stats.get('ChatGPT', {})
        if chatgpt:
            for order_type, details in chatgpt['details'].items():

                lines.append(f"*{escape_markdown(order_type)}*")
                for qty in CHATGPT_QUANTITIES:
                    lines.append(f"{qty//1000}–∫ —Ç–æ–∫–µ–Ω–æ–≤: {chatgpt['details'][order_type]['quantities'][qty]}")
                lines.append(f"*–í—Å–µ–≥–æ {escape_markdown(order_type)}: {escape_markdown(chatgpt['details'][order_type]['count'])}*\n")

            # –û–±—â–∏–µ —Å—É–º–º—ã –∏ —Ä–∞–∑–±–∏–≤–∫–∞
            total_chatgpt_count = chatgpt['total_count']
            total_chatgpt_amount = chatgpt['total_amount']
            lines.append(f"*–í—Å–µ–≥–æ –æ–ø–ª–∞—Ç ChatGPT: {escape_markdown(total_chatgpt_count)}* \(4_1 \+ o1\)\n")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Midjourney
        midjourney = order_stats.get('Midjourney', {})
        if midjourney:
            lines.append("*Midjourney*")
            for qty in MIDJOURNEY_QUANTITIES:
                count = midjourney['details'].get(qty, 0)
                lines.append(f"{qty} –∑–∞–ø—Ä–æ—Å–æ–≤: {count}")
            total_midjourney = midjourney.get('total_count', 0)
            total_midjourney_amount = midjourney.get('total_amount', 0)
            lines.append(f"*–í—Å–µ–≥–æ: {escape_markdown(total_midjourney)}*")

        return '\n'.join(lines)

    all_time = format_order(statistics['all_time'], "–û–ø–ª–∞—Ç –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è")
    today = format_order(statistics['today'], "–û–ø–ª–∞—Ç –∑–∞ 24 —á–∞—Å–∞")
    return f"{all_time}\n\n{today}"


async def fetch_short_statistics() -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É.
    """
    try:
        conn: asyncpg.Connection = await get_conn()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}"

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ –∏ –Ω–∞—á–∞–ª–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        moscow_tz = ZoneInfo("Europe/Moscow")
        now_moscow = datetime.now(moscow_tz)
        start_of_day = now_moscow.replace(hour=0, minute=0, second=0, microsecond=0).replace(tzinfo=None)
        logger.info(f"–°–±–æ—Ä –∫—Ä–∞—Ç–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è: {start_of_day.isoformat()}")

        # –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM users
        """)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {users_all_time}")

        # –ó–∞–ø—Ä–æ—Å–æ–≤
        total_requests_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM usage
        """)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {total_requests_all_time}")

        # –û–ø–ª–∞—Ç
        total_payments_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM orders
            WHERE pay_time IS NOT NULL
        """)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {total_payments_all_time}")

        # ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤
        chatgpt_requests_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM usage
            WHERE ai_type IN ('chatgpt', '4_1', '4o', 'o4-mini', 'o1')
        """)
        logger.info(f"ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {chatgpt_requests_all_time}")

        # ChatGPT –æ–ø–ª–∞—Ç
        chatgpt_payments_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM orders
            WHERE pay_time IS NOT NULL AND order_type IN ('chatgpt', '4_1', '4o', 'o4-mini', 'o1')
        """)
        logger.info(f"ChatGPT –æ–ø–ª–∞—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {chatgpt_payments_all_time}")

        # Midjourney –∑–∞–ø—Ä–æ—Å–æ–≤
        midjourney_requests_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM usage
            WHERE ai_type = 'image'
        """)
        logger.info(f"Midjourney –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {midjourney_requests_all_time}")

        # Midjourney –æ–ø–ª–∞—Ç
        midjourney_payments_all_time = await conn.fetchval("""
            SELECT COUNT(*)
            FROM orders
            WHERE pay_time IS NOT NULL AND order_type = 'midjourney'
        """)
        logger.info(f"Midjourney –æ–ø–ª–∞—Ç –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è: {midjourney_payments_all_time}")

        # –ó–∞ 24 —á–∞—Å–∞ (—Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è
        users_today = await conn.fetchval("""
            SELECT COUNT(DISTINCT user_id)
            FROM users
            WHERE to_timestamp(reg_time) >= $1
        """, start_of_day)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è —Å–µ–≥–æ–¥–Ω—è: {users_today}")

        # –ó–∞–ø—Ä–æ—Å–æ–≤
        total_requests_today = await conn.fetchval("""
            SELECT COUNT(*)
            FROM usage
            WHERE create_time >= $1
        """, start_of_day)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_requests_today}")

        # –û–ø–ª–∞—Ç
        total_payments_today = await conn.fetchval("""
            SELECT COUNT(*)
            FROM orders
            WHERE pay_time IS NOT NULL AND pay_time >= $1
        """, start_of_day)
        logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {total_payments_today}")

        # ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤
        chatgpt_requests_today = await conn.fetchval("""
            SELECT COUNT(*)
            FROM usage
            WHERE ai_type IN ('chatgpt', '4_1', '4o', 'o4-mini', 'o1') AND create_time >= $1
        """, start_of_day)
        logger.info(f"ChatGPT –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {chatgpt_requests_today}")

        # ChatGPT –æ–ø–ª–∞—Ç
        chatgpt_payments_today = await conn.fetchval("""
            SELECT COUNT(*)
            FROM orders
            WHERE pay_time IS NOT NULL AND pay_time >= $1 AND order_type IN ('chatgpt', '4_1', '4o', 'o4-mini', 'o1')
        """, start_of_day)
        logger.info(f"ChatGPT –æ–ø–ª–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {chatgpt_payments_today}")

        # Midjourney –∑–∞–ø—Ä–æ—Å–æ–≤
        midjourney_requests_today = await conn.fetchval("""
            SELECT COUNT(*)
            FROM usage
            WHERE ai_type = 'image' AND create_time >= $1
        """, start_of_day)
        logger.info(f"Midjourney –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {midjourney_requests_today}")

        # Midjourney –æ–ø–ª–∞—Ç
        midjourney_payments_today = await conn.fetchval("""
            SELECT COUNT(*)
            FROM orders
            WHERE pay_time IS NOT NULL AND pay_time >= $1 AND order_type = 'midjourney'
        """, start_of_day)
        logger.info(f"Midjourney –æ–ø–ª–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {midjourney_payments_today}")

        # --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–í–Å–ó–î ---
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ
        moscow_tz = ZoneInfo("Europe/Moscow")
        now_moscow = datetime.now(moscow_tz)

        # –°–ª–æ–≤–∞—Ä—å –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        months = {
            1: '–Ø–Ω–≤–∞—Ä—å',
            2: '–§–µ–≤—Ä–∞–ª—å',
            3: '–ú–∞—Ä—Ç',
            4: '–ê–ø—Ä–µ–ª—å',
            5: '–ú–∞–π',
            6: '–ò—é–Ω—å',
            7: '–ò—é–ª—å',
            8: '–ê–≤–≥—É—Å—Ç',
            9: '–°–µ–Ω—Ç—è–±—Ä—å',
            10: '–û–∫—Ç—è–±—Ä—å',
            11: '–ù–æ—è–±—Ä—å',
            12: '–î–µ–∫–∞–±—Ä—å'
        }

        # –ù–∞–∑–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–µ–≤
        current_month_number = now_moscow.month
        current_month_name = months[current_month_number]

        prev_month_number = current_month_number - 1 if current_month_number > 1 else 12
        prev_month_name = months[prev_month_number]

        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–≤—ë–∑–¥–∞–º
        stars_today_count = await conn.fetchval(
            "SELECT COALESCE(SUM(amount), 0) FROM stars WHERE DATE(date) = CURRENT_DATE AND paid = TRUE"
        )
        stars_current_month = await conn.fetchval(
            """
            SELECT COALESCE(SUM(amount), 0)
            FROM stars
            WHERE EXTRACT(MONTH FROM date) = $1 AND EXTRACT(YEAR FROM date) = $2 AND paid = TRUE
            """,
            current_month_number, now_moscow.year
        )
        stars_prev_month = await conn.fetchval(
            """
            SELECT COALESCE(SUM(amount), 0)
            FROM stars
            WHERE EXTRACT(MONTH FROM date) = $1 AND EXTRACT(YEAR FROM date) = $2 AND paid = TRUE
            """,
            prev_month_number,
            now_moscow.year if prev_month_number != 12 else now_moscow.year - 1
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –∑–≤—ë–∑–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        stars_users_today = await conn.fetchval(
            "SELECT COUNT(DISTINCT user_id) FROM stars WHERE DATE(date) = CURRENT_DATE AND paid = TRUE"
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        stars_users_current_month = await conn.fetchval(
            """
            SELECT COUNT(DISTINCT user_id)
            FROM stars
            WHERE EXTRACT(MONTH FROM date) = $1 AND EXTRACT(YEAR FROM date) = $2 AND paid = TRUE
            """,
            current_month_number, now_moscow.year
        )

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
        stars_users_prev_month = await conn.fetchval(
            """
            SELECT COUNT(DISTINCT user_id)
            FROM stars
            WHERE EXTRACT(MONTH FROM date) = $1 AND EXTRACT(YEAR FROM date) = $2 AND paid = TRUE
            """,
            prev_month_number,
            now_moscow.year if prev_month_number != 12 else now_moscow.year - 1
        )

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await conn.close()
        logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

        # --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –î–ê–ù–ù–´–• ---
        all_time = {
            'users': users_all_time,
            'requests': total_requests_all_time,
            'payments': total_payments_all_time,
            'chatgpt_requests': chatgpt_requests_all_time,
            'chatgpt_payments': chatgpt_payments_all_time,
            'midjourney_requests': midjourney_requests_all_time,
            'midjourney_payments': midjourney_payments_all_time,
        }

        today = {
            'users': users_today,
            'requests': total_requests_today,
            'payments': total_payments_today,
            'chatgpt_requests': chatgpt_requests_today,
            'chatgpt_payments': chatgpt_payments_today,
            'midjourney_requests': midjourney_requests_today,
            'midjourney_payments': midjourney_payments_today,
        }

        stars_data = {
            'today': stars_today_count,
            'current_month': stars_current_month,
            'prev_month': stars_prev_month,
            'users_today': stars_users_today,
            'users_current_month': stars_users_current_month,
            'users_prev_month': stars_users_prev_month,
            'current_month_name': current_month_name,
            'prev_month_name': prev_month_name
        }

        short_statistics = format_short_statistics(
            all_time=all_time,
            today=today,
            stars=stars_data
        )

        return short_statistics

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}"


def format_short_statistics(all_time: Dict[str, Any], today: Dict[str, Any], stars: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.
    """

    def format_section(title: str, data: Dict[str, Any]) -> str:
        lines = [f"*{escape_markdown(title)}:*"]

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        lines.append(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {escape_markdown(str(data['users']))}")

        # –ó–∞–ø—Ä–æ—Å—ã –∏ –æ–ø–ª–∞—Ç—ã
        lines.append(f"–ó–∞–ø—Ä–æ—Å–æ–≤ \| –û–ø–ª–∞—Ç \| {data['requests']} \| {data['payments']}")

        # ChatGPT
        chatgpt_payments = data['chatgpt_payments'] if data['chatgpt_payments'] > 0 else "0"
        lines.append(f"ChatGPT \| {data['chatgpt_requests']} \| {chatgpt_payments}")

        # Midjourney
        midjourney_payments = data['midjourney_payments'] if data['midjourney_payments'] > 0 else "0"
        lines.append(f"Midjourney \| {data['midjourney_requests']} \| {midjourney_payments}")

        return '\n'.join(lines)

    all_time_section = format_section("–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è", all_time)
    today_section = format_section("–ó–∞ 24 —á–∞—Å–∞", today)
    # --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Stars ---
    stars_section = (
        "**Stars:**\n"
        f"–ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stars.get('users_today', 0)} \({stars.get('today', 0)} —Ä—É–±\)\n"
        f"–ó–∞ {stars['current_month_name']}: {stars.get('users_current_month', 0)} \({stars.get('current_month', 0)} —Ä—É–±\)\n"
        f"–ó–∞ {stars['prev_month_name']}: {stars.get('users_prev_month', 0)} \({stars.get('prev_month', 0)} —Ä—É–±\)"
    )

    return f"{all_time_section}\n\n{today_section}\n\n{stars_section}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def get_conn() -> Connection:
    return await asyncpg.connect(user=DB_USER, password=DB_PASSWORD, database=DB_DATABASE, host=DB_HOST)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_tables():
    conn: Connection = await get_conn()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã chats
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS chats (
            id SERIAL PRIMARY KEY,            -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞
            user_id BIGINT,                   -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —á–∞—Ç–æ–º
            name VARCHAR(255),                -- –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–º–∞)
            summary TEXT,                     -- –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç–∞ (—Å–≤–æ–¥–∫–∞)
            keywords TEXT[],                  -- –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
            created_at TIMESTAMP DEFAULT NOW(), -- –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞
            updated_at TIMESTAMP DEFAULT NOW()  -- –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
        );
    """)

    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ –µ—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É keywords –æ—Ç–¥–µ–ª—å–Ω–æ
    await conn.execute("""
        ALTER TABLE chats
        ADD COLUMN IF NOT EXISTS keywords TEXT[];
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã messages
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id SERIAL PRIMARY KEY,                                -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
            chat_id INT REFERENCES chats(id) ON DELETE CASCADE,   -- ID —á–∞—Ç–∞ (—Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ —Ç–∞–±–ª–∏—Ü—É `chats`)
            user_id BIGINT NULL,                                  -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, NULL –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
            text TEXT,                                            -- –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            created_at TIMESTAMP DEFAULT NOW()                    -- –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        );
    """)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ current_chat_id –≤ —Ç–∞–±–ª–∏—Ü—É users
    await conn.execute("""
        ALTER TABLE users
        ADD COLUMN IF NOT EXISTS current_chat_id INT;
    """)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–∞ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ chats
    await conn.execute("""
        CREATE INDEX IF NOT EXISTS idx_chats_user_id ON chats(user_id);
    """)

    # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–≤—ë–∑–¥:
    await conn.execute(
        "CREATE TABLE IF NOT EXISTS stars ("
        "id SERIAL PRIMARY KEY, "
        "user_id BIGINT, "
        "date TIMESTAMP NOT NULL DEFAULT now(), "
        "amount INTEGER NOT NULL DEFAULT 1, "
        "order_id TEXT, "
        "paid BOOLEAN DEFAULT FALSE"
        ")"
    )

    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
async def create_chat(user_id: int, name: str, summary: str) -> int:
    conn: Connection = await get_conn()
    result = await conn.fetchrow("""
        INSERT INTO chats (user_id, name, summary, created_at, updated_at)
        VALUES ($1, $2, $3, NOW(), NOW())
        RETURNING id;
    """, user_id, name, summary)
    await conn.close()
    return result['id']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
async def add_message(chat_id: int, user_id: int, text: str):
    conn: Connection = await get_conn()
    await conn.execute("""
        INSERT INTO messages (chat_id, user_id, text, created_at)
        VALUES ($1, $2, $3, NOW());
    """, chat_id, user_id, text)
    await conn.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def set_current_chat(user_id: int, chat_id: int):
    conn: Connection = await get_conn()
    await conn.execute("""
        UPDATE users SET current_chat_id = $2 WHERE user_id = $1;
    """, user_id, chat_id)
    await conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–∞ –ø–æ ID
async def get_chat_by_id(chat_id: int):
    conn: Connection = await get_conn()
    row = await conn.fetchrow("SELECT * FROM chats WHERE id = $1", chat_id)
    await conn.close()
    return row

async def update_chat_summary(chat_id: int, summary: str):
    conn = await get_conn()
    await conn.execute("""
        UPDATE chats SET summary = $2, updated_at = NOW() WHERE id = $1;
    """, chat_id, summary)
    await conn.close()

async def add_star(user_id: int, amount: int, order_id: str):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É stars –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã.

    Args:
    user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    amount (int): –°—É–º–º–∞.
    order_id (str): –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.
    """
    conn = await get_conn()
    try:
        await conn.execute(
            "INSERT INTO stars (user_id, amount, paid, order_id) VALUES ($1, $2, $3, $4)",
            user_id, amount, False, order_id
        )
    finally:
        await conn.close()


async def mark_star_paid(order_id: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ stars –ø–æ order_id.

    Args:
    order_id (str): –°—Ç—Ä–æ–∫–æ–≤—ã–π ID –∑–∞–∫–∞–∑–∞.
    """
    conn = await get_conn()
    try:
        await conn.execute(
            "UPDATE stars SET paid = TRUE WHERE order_id = $1",
            order_id
        )
    finally:
        await conn.close()


# –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π OpenAI (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑–º–µ—Ä, –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Ç.–¥.)
async def update_image_openai_settings(user_id, key_path, value):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –≤ JSONB-–∫–æ–ª–æ–Ω–∫–µ image_openai_settings.

    –ü—Ä–∏–º–µ—Ä:
        await update_image_openai_settings(user_id, ['size'], '"1536x1024"')
    """
    conn: Connection = await get_conn()
    # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫–∞–∫ —Å–ø–∏—Å–æ–∫, –∞ –Ω–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    await conn.execute(
        "UPDATE users SET image_openai_settings = jsonb_set(image_openai_settings, $2, $3) WHERE user_id = $1",
        user_id, key_path, value
    )
    await conn.close()


# —É–º–µ–Ω—å—à–∞—Ç—å –±–∞–ª–∞–Ω—Å image open AI
async def decrease_image_openai_balance(user_id):
    conn = await get_conn()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–º–µ–Ω—å—à–∏—Ç—å free_image_openai
        result = await conn.execute(
            """
            UPDATE users
            SET free_image_openai = GREATEST(free_image_openai - 1, 0)
            WHERE user_id = $1 AND free_image_openai > 0
            RETURNING user_id, free_image_openai
            """,
            user_id
        )

        if result == "UPDATE 0":
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö, —É–º–µ–Ω—å—à–∞–µ–º –ø–ª–∞—Ç–Ω—ã–µ
            await conn.execute(
                """
                UPDATE users
                SET image_openai = GREATEST(image_openai - 1, 0)
                WHERE user_id = $1 AND image_openai > 0
                """,
                user_id
            )
    finally:
        await conn.close()


async def has_image_openai_balance(user_id):
    conn = await get_conn()
    user = await conn.fetchrow("SELECT image_openai, free_image_openai FROM users WHERE user_id = $1", user_id)
    await conn.close()

    if user["image_openai"] > 0 or user["free_image_openai"] > 0:
        return True
    else:
        return False


# –û—Ç–º–µ—Ç–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏
async def mark_used_trial(user_id):
    conn = await get_conn()
    try:
        result = await conn.fetchrow("SELECT used_trial FROM users WHERE user_id = $1", user_id)
        if result and not result["used_trial"]:
            await conn.execute("UPDATE users SET used_trial = TRUE WHERE user_id = $1", user_id)
    finally:
        await conn.close()

async def update_is_subscribed(user_id: int, value: bool):
    conn = await get_conn()
    await conn.execute("UPDATE users SET is_subscribed = $1 WHERE user_id = $2", value, user_id)
    await conn.close()


utils\mj_apis.py
import logging
import aiohttp
import json

from utils import db
from config import go_api_token, APIFRAME_API_KEY, midjourney_webhook_url

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')

# –û—Å–Ω–æ–≤–Ω–æ–π URL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Midjourney
GOAPI_URL = "https://api.goapi.ai/mj/v2"

# –†–µ–∑–µ—Ä–≤–Ω—ã–π URL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Midjourney
APIFRAME_URL = "https://api.apiframe.pro"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è API GoAPI (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å MidJourney)
GOAPI_HEADERS = {
    'Content-Type': 'application/json',
    'Accept': 'application/json',
    'X-API-KEY': go_api_token  # –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GoAPI
}

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è Apiframe
APIFRAME_HEADERS = {
    'Content-Type': 'application/json',
    'Authorization': APIFRAME_API_KEY
}

# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GoAPI (MidJourney)
class GoAPI:
    def __init__(self):
        self.session = aiohttp.ClientSession()

    async def close(self):
        await self.session.close()

    async def create_request(self, data, action, request_id):

        data["webhook_endpoint"] = midjourney_webhook_url + "/" + str(request_id)  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        data["notify_progress"] = True
        url=f"{GOAPI_URL}/{action}"

        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GoAPI: URL={url}, Data={data}")

        try:
            async with self.session.post(url, json=data, headers=GOAPI_HEADERS) as response:
                if response.status != 200:
                    error_text = await response.text()
                    print(f"–û—à–∏–±–∫–∞ GoAPI: {response.status} - {error_text}")
                    raise Exception(f"GoAPI Error: {response.status} - {error_text}")
                response_content = await response.json()
                logger.info(f"–û—Ç–≤–µ—Ç GoAPI: {response_content}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å action_id
                task_id = response_content.get('task_id')
                if task_id:
                    logger.info(f"Task ID: {task_id}, Request ID: {request_id}")
                    await db.update_action_with_task_id(request_id, task_id)

                return response_content
        except Exception as e:
            logger.info(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GoAPI: {e}")
            raise

    async def imagine(self, prompt, request_id):
        data = {
            "process_mode": "fast",
            "prompt": prompt,
        }
        return await self.create_request(data, "imagine", request_id)

    async def upscale(self, task_id, index, request_id):
        data = {
            "origin_task_id": task_id,
            "index": index
        }
        return await self.create_request(data, "upscale", request_id)

    async def variation(self, task_id, index, request_id):
        data = {
            "origin_task_id": task_id,
            "index": index
        }
        return await self.create_request(data, "variation", request_id)

    async def outpaint(self, task_id, zoom_ratio, request_id):
        data = {
            "origin_task_id": task_id,
            "zoom_ratio": zoom_ratio
        }
        return await self.create_request(data, "outpaint", request_id)


# –ö–ª–∞—Å—Å —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º API - ApiFrame
class ApiFrame:
    def __init__(self):
        self.session = aiohttp.ClientSession()

    async def close(self):
        await self.session.close()

    # async def create_request(self, data, action, request_id):

    #     data["webhook_endpoint"] = midjourney_webhook_url + "/" + str(request_id)
    #     data["notify_progress"] = True
    #     url = f"{APIFRAME_URL}/{action}"

    #     logger.info(f'Data: {data}, Action: {action}, Request ID: {request_id}')
    #     logger.info(f'WebHook: {data["webhook_endpoint"]}, url: {url}')

    #     try:
    #         async with self.session.post(url, json=data, headers=APIFRAME_HEADERS) as response:
    #             if response.status != 200:
    #                 error_text = await response.text()
    #                 logger.error(f"–û—à–∏–±–∫–∞ ApiFrame: {response.status} - {error_text}")
    #                 raise Exception(f"ApiFrame Error: {response.status} - {error_text}")
    #             response_content = await response.json()
    #             logger.info(f"–û—Ç–≤–µ—Ç ApiFrame: {response_content}")
    #             return response_content
    #     except Exception as e:
    #         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ApiFrame: {e}")
    #         raise

    async def create_request(self, data, action, request_id):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π webhook_endpoint –±–µ–∑ request_id
        data["webhook_endpoint"] = f"{midjourney_webhook_url}"
        data["notify_progress"] = True
        url = f"{APIFRAME_URL}/{action}"

        logger.info(f'Data: {data}, Action: {action}, Request ID: {request_id}')
        logger.info(f'WebHook: {data["webhook_endpoint"]}, URL: {url}')

        try:
            async with self.session.post(url, json=data, headers=APIFRAME_HEADERS) as response:
                if response.status != 200:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ ApiFrame: {response.status} - {error_text}")
                    raise Exception(f"ApiFrame Error: {response.status} - {error_text}")
                response_content = await response.json()
                logger.info(f"–û—Ç–≤–µ—Ç ApiFrame: {response_content}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å action_id
                task_id = response_content.get('task_id')
                if task_id:
                    logger.info(f"Task ID: {task_id}, Request ID: {request_id}")
                    await db.update_action_with_task_id(request_id, task_id)
                
                return response_content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ApiFrame: {e}")
            raise

    async def imagine(self, prompt, request_id):
        data = {
            "prompt": prompt,
        }
        return await self.create_request(data, "imagine", request_id)

    async def upscale(self, task_id, index, request_id):
        data = {
            "parent_task_id": task_id,
            "index": index
        }
        return await self.create_request(data, "upscale", request_id)

    async def variation(self, task_id, index, request_id):
        data = {
            "parent_task_id": task_id,
            "index": index
        }
        return await self.create_request(data, "variation", request_id)

    async def outpaint(self, task_id, zoom_ratio, request_id):
        data = {
            "parent_task_id": task_id,
            "zoom_ratio": zoom_ratio
        }
        return await self.create_request(data, "outpaint", request_id)


class MidJourneyAPI:
    def __init__(self, primary_api="goapi"):
        self.primary_api = primary_api  # "goapi" –∏–ª–∏ "apiframe"
        self.apiframe = ApiFrame()
        self.goapi = GoAPI()

    def set_primary_api(self, api_type):
        if api_type not in ["goapi", "apiframe"]:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø API")
        self.primary_api = api_type

    async def close(self):
        await self.apiframe.close()

    async def create_request(self, data, action, request_id):

        logger.info(f'Data: {data}, Action: {action}, Request ID: {request_id}')

        if self.primary_api == "goapi":
            try:
                response = await self.goapi.create_request(data, action, request_id)
                return response
            except Exception as e:
                logger.error(f"GoAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}.")
                try:
                    error_data = json.loads((str(e)[19:]).strip())  # –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ—à–∏–±–∫–∏
                    logger.info(f"–û—à–∏–±–∫–∞ GoAPI: {error_data}")
                    # message = error_data.get("message", "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—à–∏–±–∫–µ")
                    return error_data
                except (json.JSONDecodeError, IndexError) as parse_error:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞—ë—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ GoAPI: {parse_error}")
                    return str(e)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º—É –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å

        if self.primary_api == "apiframe":
            try:
                response = await self.apiframe.create_request(data, action, request_id)
                return response
            except Exception as e:
                logger.error(f"ApiFrame –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}.")

    async def imagine(self, prompt, request_id):
        action = "imagine"
        if self.primary_api == "goapi":
            data = {
                "process_mode": "fast",
                "prompt": prompt,
                "model_version": "v7"
                # –î—Ä—É–≥–∏–µ –ø–æ–ª—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è GoAPI
            }
        else:
            data = {
                "prompt": prompt,
                # –î—Ä—É–≥–∏–µ –ø–æ–ª—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è ApiFrame
            }
        return await self.create_request(data, action, request_id)

    async def upscale(self, task_id, index, request_id):

        action = "upscale" if self.primary_api == "goapi" else "upscale-1x"
        if self.primary_api == "goapi":
            data = {
                "origin_task_id": task_id,
                "index": index
            }
        else:
            data = {
                "parent_task_id": task_id,
                "index": index
            }
        return await self.create_request(data, action, request_id)

    async def variation(self, task_id, index, request_id):

        if index == 'high':
            index = 'high_variation' if self.primary_api == "goapi" else 'strong'
        elif index == 'low':
            index = 'low_variation' if self.primary_api == "goapi" else 'subtle'

        action = "variation" if self.primary_api == "goapi" else "variations"
        if self.primary_api == "goapi":
            data = {
                "origin_task_id": task_id,
                "index": index
            }
        else:
            data = {
                "parent_task_id": task_id,
                "index": index
            }
        return await self.create_request(data, action, request_id)

    async def outpaint(self, task_id, zoom_ratio, request_id):

        if zoom_ratio == '1.5':
            zoom_ratio = '1.5' if self.primary_api == "goapi" else 1.5
        elif zoom_ratio == '2':
            zoom_ratio = '2' if self.primary_api == "goapi" else 2

        action = "outpaint"
        if self.primary_api == "goapi":
            data = {
                "origin_task_id": task_id,
                "zoom_ratio": zoom_ratio
            }
        else:
            data = {
                "parent_task_id": task_id,
                "zoom_ratio": zoom_ratio
            }
        return await self.create_request(data, action, request_id)

utils\more_api.py
import base64
from io import BytesIO  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Ç–æ–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö
import aiohttp  # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import requests  # –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import hashlib  # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–µ—à–µ–π
from config import FKWallet, IMGBB_API_KEY  # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –∏ API-–∫–ª—é—á–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

import os

# –°–ª–æ–≤–∞—Ä—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–∞–ª—é—Ç—ã —Å –∏—Ö –∫–æ–¥–∞–º–∏ –¥–ª—è FKWallet (–∫–æ—à–µ–ª–µ–∫)
fkwallet_currencies = {'qiwi': 63, 'bank_card': 94}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ –±–∞–π—Ç–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
def get_qr_photo(url):

    response = requests.get(
        f'https://api.qrserver.com/v1/create-qr-code/?size=600x600&qzone=2&data={url}')  # –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞
    return BytesIO(response.content)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ—Ç–æ–∫–∞ –±–∞–π—Ç–æ–≤


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–Ω–∞ –∫–æ—à–µ–ª–µ–∫ –∏–ª–∏ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É)
def withdraw_ref_balance(purse, amount, currency):

    # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    sign = hashlib.md5(f'{FKWallet.wallet_id}{fkwallet_currencies[currency]}{amount}{purse}{FKWallet.api_key}'.encode())
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ API FKWallet
    response = requests.post('https://fkwallet.com/api_v1.php', data={
        'wallet_id': FKWallet.wallet_id,
        'purse': purse,  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã
        'amount': amount,  # –°—É–º–º–∞
        'desc': '–ü–µ—Ä–µ–≤–æ–¥',  # –û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        'currency': fkwallet_currencies[currency],  # –ö–æ–¥ –≤–∞–ª—é—Ç—ã
        'sign': sign.hexdigest(),  # –ü–æ–¥–ø–∏—Å—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        'action': 'cashout'  # –î–µ–π—Å—Ç–≤–∏–µ ‚Äî –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
    })
    print(response.json())  # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç


UPLOAD_DIR = "/var/www/neuronbot/uploads"  # –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
BASE_URL = "https://neuronbot.ru/uploads"  # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º

async def upload_photo_to_host(photo_url):
    async with aiohttp.ClientSession() as session:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å Telegram
        async with session.get(photo_url) as resp:
            if resp.status != 200:
                return "error"

            photo_bytes = await resp.read()
            filename = os.path.basename(photo_url)  # –ò–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            file_path = os.path.join(UPLOAD_DIR, filename)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        with open(file_path, "wb") as f:
            f.write(photo_bytes)

        return f"{BASE_URL}/{filename}"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª


utils\pay.py
import hashlib  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–µ–π
import hmac     # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HMAC –ø–æ–¥–ø–∏—Å–∏
import json     # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
import logging
import random   # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
from datetime import datetime, timedelta  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
from urllib.parse import urlencode  # –î–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
import hashlib
import requests
import uuid
import config  # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import FreeKassa, LAVA_API_KEY, LAVA_SHOP_ID, PayOK, Tinkoff  # –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
from utils import db  # –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
from utils.db import get_conn

logger = logging.getLogger(__name__)

logging.basicConfig(
    level=logging.INFO,
    format='%(filename)s:%(lineno)d #%(levelname)-8s '
           '[%(asctime)s] - %(name)s - %(message)s')




def get_pay_url_tinkoff(order_id, amount):
    # –ü—Ä–∏–≤–æ–¥–∏–º UUID –∫ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—Ç—Ä–æ–∫–∞
    if isinstance(order_id, uuid.UUID):
        order_id = str(order_id)
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ Tinkoff
    data = {
        "TerminalKey": Tinkoff.terminal_id,
        "Amount": amount * 100,
        "CallbackUrl": "https://neuronbot.ru/api/pay/tinkoff/receipt",
        "OrderId": order_id,
        "NotificationURL": "https://91.192.102.250/api/pay/tinkoff",
        "Receipt": {
            "Email": "bills.group@mail.ru",
            "Phone": "+79530983630",
            "Taxation": "patent",
            "Items": [
                {
                    "Name": "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ Telegram NeuronAgent",
                    "Price": amount * 100,
                    "Quantity": 1.0,
                    "Amount": amount * 100,
                    "PaymentMethod": "full_payment",
                    "PaymentObject": "commodity",
                    "Tax": "none"
                }
            ]
        }
    }

    # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    sign_str = f"{amount * 100}https://91.192.102.250/api/pay/tinkoff{order_id}{Tinkoff.api_token}{Tinkoff.terminal_id}"
    sign = hashlib.sha256(sign_str.encode('utf-8')).hexdigest()

    data["Token"] = sign  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–ø—Ä–æ—Å

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–ø–ª–∞—Ç—ã
    res = requests.post("https://securepay.tinkoff.ru/v2/Init", json=data)
    res_data = res.json()  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f'Tinkoff Response: {res_data}')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º payment_id –≤ –±–∞–∑—É, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    payment_id = res_data.get("PaymentId")
    if payment_id:
        # –í—ã–∑–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ sync-–∫–æ–¥–∞ ‚Äî —á–µ—Ä–µ–∑ asyncio
        import asyncio
        asyncio.create_task(save_payment_id(order_id, payment_id))

    return res_data["PaymentURL"]


async def save_payment_id(order_id, payment_id):
    conn = await get_conn()
    await conn.execute("UPDATE orders SET payment_id = $1 WHERE order_id = $2", payment_id, order_id)
    await conn.close()

import requests

async def get_receipt_url(payment_id):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Tinkoff API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ payment_id
    data = {
        "TerminalKey": Tinkoff.terminal_id,
        "PaymentId": payment_id,
        "Token": generate_receipt_token(payment_id)  # –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    }
    response = requests.post("https://securepay.tinkoff.ru/v2/CheckOrder", json=data)

    if response.status_code == 200:
        result = response.json()
        if result.get("Success"):
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º URL —á–µ–∫–∞
            return result.get("ReceiptUrl")  # –≠—Ç–æ URL –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞
    return None

def generate_receipt_token(payment_id):
    sign_str = f"{payment_id}{Tinkoff.api_token}{Tinkoff.terminal_id}"
    return hashlib.sha256(sign_str.encode('utf-8')).hexdigest()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayOK
def get_pay_url_payok(order_id, amount):

    desc = "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ NeuronAgent"  # –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    currency = "RUB"  # –í–∞–ª—é—Ç–∞
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    sign_string = '|'.join(
        str(item) for item in
        [amount, order_id, PayOK.shop_id, currency, desc, PayOK.secret]
    )
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (MD5)
    sign = hashlib.md5(sign_string.encode())

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
    params = {"amount": amount, "payment": order_id, "shop": PayOK.shop_id, "desc": desc, "currency": currency,
              "sign": sign.hexdigest()}

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ PayOK
    return "https://payok.io/pay?" + urlencode(params)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
def get_pay_url_freekassa(order_id, amount):

    md5 = hashlib.md5()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MD5 —Ö–µ—à–∞
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    md5.update(
        f'{FreeKassa.shop_id}:{amount}:{FreeKassa.secret1}:RUB:{order_id}'.encode('utf-8'))
    pwd = md5.hexdigest()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
    pay_url = f"https://pay.freekassa.com/?m={FreeKassa.shop_id}&oa={amount}&currency=RUB&o={order_id}&s={pwd}"
    return pay_url


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ª–æ–≤–∞—Ä—è
def sortDict(data: dict):

    sorted_tuple = sorted(data.items(), key=lambda x: x[0])  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á–∞–º
    return dict(sorted_tuple)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Lava
def get_pay_url_lava(user_id, amount):

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞
    payload = {
        "sum": amount,
        "orderId": str(user_id) + ":" + str(random.randint(10000, 1000000)),  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞
        "shopId": LAVA_SHOP_ID
    }

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    payload = sortDict(payload)
    jsonStr = json.dumps(payload).encode()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (HMAC-SHA256)
    sign = hmac.new(bytes(LAVA_API_KEY, 'UTF-8'), jsonStr, hashlib.sha256).hexdigest()
    headers = {"Signature": sign, "Accept": "application/json", "Content-Type": "application/json"}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—á–µ—Ç–∞
    res = requests.post("https://api.lava.ru/business/invoice/create", json=payload, headers=headers)
    return res.json()["data"]["url"]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤/–∑–∞–ø—Ä–æ—Å–æ–≤
async def process_purchase(bot, order_id):
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    order = await db.get_order(order_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
    if order["pay_time"]:
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã
    await db.set_order_pay(order_id)

    user_id = order["user_id"]  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(user_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    model = (order["order_type"]).replace('-', '_')
    amount = order["amount"]  # –ó–∞–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    discounts = {189, 315, 412, 628, 949, 1619, 2166, 3199, 227, 386, 509, 757, 550, 246, 989} # –°—É–º–º–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–∞—è —Å–∫–∏–¥–∫–∞–º
    user_discount = await db.get_user_notified_gpt(user_id)

    logger.info(f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –¢–∏–ø –∑–∞–∫–∞–∑–∞: {model}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {order['quantity']}")

    # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
    bonus = 20000 if int(order["quantity"]) == 100000 else int((order["quantity"]) / 4) 
    total_bonus = user["tokens_4_1"] + bonus
    model = model.replace(".", "_")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –∏–ª–∏ –∑–∞–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
    if model == "midjourney":
        new_requests = user["mj"] + order["quantity"]
        await db.update_requests(user_id, new_requests)
        await bot.send_message(user_id, f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ {order['quantity']} –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è MidJourney.")
    else:
        new_tokens = int(user[f"tokens_{model}"]) + int(order["quantity"])
        await db.update_tokens(user_id, new_tokens, model)
        # await db.update_tokens(user_id, total_bonus, "4o_mini")
        await bot.send_message(user_id, f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–æ {int(order['quantity'] / 1000)} —Ç—ã—Å. —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è GPT-{model}.\n–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É!")


    if user_discount is not None and user_discount["used"] != True and amount in discounts:
        logger.info(f'–°–∫–∏–¥–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞: {user_discount["used"]}, –ø–æ–∫—É–ø–∫–∞ –Ω–∞ —Å—É–º–º—É: {amount}')
        # –ï—Å–ª–∏ –±—ã–ª–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∞ —Å–∫–∏–¥–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—é –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è, –Ω–æ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ —Ä–∞–≤–µ–Ω —Å–∫–∏–¥–æ—á–Ω–æ–π —Ü–µ–Ω–µ - –∑–Ω–∞—á–∏—Ç —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–∏–¥–∫–∏. 
        await db.update_used_discount_gpt(user_id)

    # üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–º –¥–æ—Ö–æ–¥–µ
    inviter_id = user.get("inviter_id")
    if inviter_id:
        partner_percent = 0.15
        partner_reward = int(amount * partner_percent)
        try:
            await bot.send_message(
                inviter_id,
                f"""‚úÖ–ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
‚îú –ê–∫–∫–∞—É–Ω—Ç: {user_id}
‚îú –°—É–º–º–∞ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è: {amount}‚ÇΩ
‚îî –í–∞—à –¥–æ—Ö–æ–¥: {partner_reward}‚ÇΩ (15%)"""
                )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–º –¥–æ—Ö–æ–¥–µ: {e}")


utils\__init__.py
from utils import db
from utils import ai
from utils import pay

utils\scheduled_tasks\daily_token_reset.py
import asyncio
from utils.db import get_conn

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
TOKEN_LIMITS = {
    "tokens_4o": 100_000,
    "tokens_o4_mini": 200_000,
    "tokens_4_1": 5000,
    "tokens_o1": 5000
}


async def refill_tokens():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤ —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –∏—Ö –¥–æ –ª–∏–º–∏—Ç–∞, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ.
    """
    conn = await get_conn()
    for token_type, limit in TOKEN_LIMITS.items():
        await conn.execute(
            f"""
            UPDATE users
            SET {token_type} = $1
            WHERE {token_type} < $1
            """,
            limit
        )
    await conn.close()


if __name__ == "__main__":
    asyncio.run(refill_tokens())

utils\scheduled_tasks\__init__.py


